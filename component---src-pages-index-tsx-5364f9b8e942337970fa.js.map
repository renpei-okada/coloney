{"version":3,"sources":["webpack://colony-demo/./src/components/Colony.tsx","webpack://colony-demo/../src/lib/core/Scene.ts","webpack://colony-demo/../src/lib/core/Numerics.ts","webpack://colony-demo/../src/lib/utils/animationFrame.ts","webpack://colony-demo/../src/lib/Renderer.ts","webpack://colony-demo/../src/lib/core/Vector2D.ts","webpack://colony-demo/../src/lib/core/Color.ts","webpack://colony-demo/../src/lib/core/Random.ts","webpack://colony-demo/../src/lib/core/Actor.ts","webpack://colony-demo/../src/lib/shapes/MarbleCircle.ts","webpack://colony-demo/../src/lib/shapes/Shape.ts","webpack://colony-demo/../src/lib/Food.ts","webpack://colony-demo/../src/lib/SwayFallingController.ts","webpack://colony-demo/../src/lib/FoodProvider.ts","webpack://colony-demo/../src/lib/TargetTrackingController.ts","webpack://colony-demo/../src/lib/BoidController.ts","webpack://colony-demo/../src/lib/Fish.ts","webpack://colony-demo/../src/lib/JellyFish.ts","webpack://colony-demo/../src/lib/Lophophorata.ts","webpack://colony-demo/../src/lib/RippleServer.ts","webpack://colony-demo/./src/pages/index.tsx"],"names":["scale","window","devicePixelRatio","Coloney","props","canvasRef","useRef","useState","width","height","size","setSize","isInitialized","resize","canvasEl","current","rect","getBoundingClientRect","resized","useEffect","Error","getContext","initialized","addEventListener","removeEventListener","ref","style","Scene","renderer","subscription","end","_actors","this","append","actor","push","setup","remove","actors","filter","x","begin","callback","time","id","tick","bind","Date","now","loop","requestAnimationFrame","cancelAnimationFrame","deltaTime","clear","a","update","isDestroyed","press","e","pressed","Renderer","context","y","fillStyle","clearRect","drawCircle","r","color","rgba","beginPath","arc","Math","PI","closePath","fill","drawStrokeCircle","lineWidth","strokeStyle","stroke","drawLine","x1","y1","x2","y2","lineTo","pushMatrix","save","popMatrix","restore","translate","closePathFill","closePathStroke","rotate","angle","moveTo","Vector2D","PI_TIMES_TWO","lerp","b","lerpFactor","vector","radian","cos","sin","result","diff","p1","p2","sqrt","pow","distance","Numerics","Color","g","length","code","parseInt","slice","fromHsv","h","s","v","c","map","i","round","max","min","abs","toHsv","tmp","undefined","cc","toString","replace","floor","d","indexOf","fromColorCode","alpha","toHexString","colors","next","n1","n2","random","array","Random","Actor","tags","destroy","MarbleCircle","option","location","opacity","layerNum","Object","assign","layers","getRandomColor","Array","_","hsv","nextDouble","draw","Food","isDie","shape","layersOverride","scene","value","SweyFallingController","waveOffcet","speed","waveWidth","colony","FoodProvider","foods","food","position","TargetTrackingController","smoothCurveRate","speedBias","autoTarget","endForceTrack","shockAvoidDistance","shockThreshouldDistance","foodTriggerDistance","isShowEnabled","isFoodEnabled","foodViewableAngleDeg","foodProvider","smoothCurveTriggerDistance","Infinity","noizeSize","debug","p","find","shock","checkFoodAction","targetLocation","noisev","angleDiff","atan2","lerpAngle","dist","normalize","vx","vy","isForceTracking","initTargetLocation","translateTargetLocation","inputlocation","vec","lastSpeed","target","f","toRadians","getEatableFood","BoidController","boss","boids","avoidThresholdDist","r1","r2","r3","addBoid","controller","item","drawAsBoid","movement","getMovementVector","getVectorToCenter","getVectorToAvoid","getVectorToAverage","count","Fish","segmentlocation","segLength","finAngle","finDirection","lightSegmentIndex","isFlicking","isFlicking_","beginBrightness","drawSegment","xin","yin","dx","dy","Jellyfish","capPointAngle","capPointAngleBase","capPointAngleBaseSpd","col","headFillPaintColor","paintColor","headSize","headWitherPower","CAP_JOINT_COUNT","drawFillHead","drawHeadFrame","tx","ty","j","deg","stack","unshift","stackPoint","Branch","wave","wave2","segmentLength","maxSegmentPointSize","points","pointFlickingSpeeds","segments","console","log","bgc","pc","theta","to","Lophophorata","branchCount","branches","jointLayerColors","jointCircleSize","render","Ripple","locatoin","growingSpeed","paledOutSpeed","RippleServer","ripples","init","boid","coloney","key","clientX","clientY","React","innerWidth","innerHeight"],"mappings":"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","file":"component---src-pages-index-tsx-5364f9b8e942337970fa.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\n\r\ntype Size = { width: number, height: number };\r\n\r\ninterface ColoneyProps {\r\n    width: string;\r\n    height: string;\r\n    resized: (size: Size) => void;\r\n    initialized: (context: CanvasRenderingContext2D, size: Size) => void;\r\n}\r\n\r\nconst scale = () => typeof window !== \"undefined\" ? window.devicePixelRatio : 1;\r\n\r\nexport const Coloney = (props: ColoneyProps) => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    const [size, setSize] = useState({\r\n        width: 0,\r\n        height: 0,\r\n    });\r\n    const isInitialized = useRef(false);\r\n\r\n    const resize = () => {\r\n        const canvasEl = canvasRef.current;\r\n        if (canvasEl) {\r\n            const rect = canvasEl.getBoundingClientRect();\r\n            setSize({\r\n                width: rect.width,\r\n                height: rect.height\r\n            });\r\n            props.resized({\r\n                width: rect.width,\r\n                height: rect.height\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isInitialized.current || size.width === 0) {\r\n            return;\r\n        }\r\n\r\n        isInitialized.current = true;\r\n        const canvasEl = canvasRef.current;\r\n        if (canvasEl) {\r\n            const ctx = canvasEl.getContext(\"2d\");\r\n            ctx.scale(scale(), scale());\r\n            props.initialized(canvasEl.getContext(\"2d\"), size);\r\n        }\r\n        else {\r\n            throw new Error(\"The canvas element couldn't initialized.\");\r\n        }\r\n    }, [size]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resize);\r\n        return () => window.removeEventListener(\"resize\", resize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        resize();\r\n    }, [props.width, props.height]);\r\n\r\n    return <canvas\r\n        ref={canvasRef}\r\n        width={size.width * scale()}\r\n        height={size.height * scale()}\r\n        style={{\r\n            width: props.width,\r\n            height: props.height,\r\n        }}\r\n    />;\r\n}","import { Actor } from \"../core/Actor\";\r\nimport { IRenderer } from \"../IRenderer\";\r\nimport { animationFrame } from \"../utils/animationFrame\";\r\nimport { MousePressedEvent } from \"./MouseEvent\";\r\n\r\ntype Subscription = ReturnType<typeof animationFrame>;\r\n\r\nexport class Scene {\r\n    subscription: Subscription = { end: () => { } };\r\n    height = 0;\r\n    width = 0;\r\n    _actors: Actor[] = [];\r\n\r\n    get actors() {\r\n        return this._actors;\r\n    }\r\n\r\n    constructor(width: number, height: number, readonly renderer: IRenderer) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    append(actor: Actor) {\r\n        this._actors.push(actor);\r\n        actor.setup(this);\r\n    }\r\n\r\n    remove(actor: Actor) {\r\n        this._actors = this.actors.filter(x => x !== actor);\r\n    }\r\n\r\n    begin() {\r\n        this.end();\r\n        this.subscription = animationFrame(this.tick.bind(this));\r\n        for (const a of this.actors) {\r\n            a.setup(this);\r\n        }\r\n    }\r\n\r\n    end() {\r\n        this.subscription.end();\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        this.renderer.clear(0, 0, this.width, this.height);\r\n\r\n        const actors = this._actors;\r\n        for (const a of actors) {\r\n            a.update(deltaTime, this);\r\n\r\n            if (a.isDestroyed) {\r\n                this._actors = this.actors.filter(x => x !== a);\r\n            }\r\n        }\r\n    }\r\n\r\n    press(e: MousePressedEvent) {\r\n        for (const controller of this.actors) {\r\n            controller.pressed(e);\r\n        }\r\n    }\r\n}","import { Vector2D } from \"./Vector2D\";\r\n\r\nexport namespace Numerics {\r\n    export const PI2 = 3.14159265359;\r\n    export const PI_TIMES_TWO2 = 6.28318530718;\r\n    export const PI = 3.14159265359;\r\n    export const PI_TIMES_TWO = 6.28318530718;\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function lerp(a: number, b: number, lerpFactor: number): number {\r\n        const result = ((1.0 - lerpFactor) * a) + (lerpFactor * b);\r\n        return result;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function rotate(vector: Vector2D, radian: number): Vector2D {\r\n        return new Vector2D(\r\n            vector.x * Math.cos(radian) - vector.y * Math.sin(radian),\r\n            vector.x * Math.sin(radian) + vector.y * Math.cos(radian)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function lerpAngle(a: number, b: number, lerpFactor: number): number {\r\n        let result = 0;\r\n        const diff = b - a;\r\n\r\n        if (diff < -PI) {\r\n            // lerp upwards past PI_TIMES_TWO\r\n            b += PI_TIMES_TWO;\r\n\r\n            result = lerp(a, b, lerpFactor);\r\n\r\n            if (result >= PI_TIMES_TWO) {\r\n                result -= PI_TIMES_TWO;\r\n            }\r\n        }\r\n\r\n        else if (diff > PI) {\r\n            // lerp downwards past 0\r\n            b -= PI_TIMES_TWO;\r\n\r\n            result = lerp(a, b, lerpFactor);\r\n\r\n            if (result < 0) {\r\n                result += PI_TIMES_TWO;\r\n            }\r\n        }\r\n\r\n        else {\r\n            // straight lerp\r\n            result = lerp(a, b, lerpFactor);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function toRadians(angle: number) {\r\n        return (PI / 180) * angle;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function toAngle(radian: number) {\r\n        return radian * 180 / PI;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function dist(p1: Vector2D, p2: Vector2D) {\r\n        return Math.sqrt(Math.pow((p2.x - p1.x), 2) + Math.pow((p2.y - p1.y), 2));\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function normalize(a: Vector2D) {\r\n        const distance = Math.sqrt(a.x * a.x + a.y * a.y);\r\n        if (distance === 0) {\r\n            return new Vector2D(0, 0);\r\n        }\r\n\r\n        return new Vector2D(a.x / distance, a.y / distance);\r\n    }\r\n}\r\n","\r\nexport const animationFrame = (callback: (deltaTime: number) => void) => {\r\n    let time = Date.now();\r\n    let id = 0;\r\n    let loop = () => {\r\n        callback((Date.now() - time) * 0.001);\r\n        id = requestAnimationFrame(loop);\r\n        time = Date.now();\r\n    }\r\n    loop();\r\n    return {\r\n        end: () => cancelAnimationFrame(id)\r\n    };\r\n}\r\n\r\n// export const animationFrame = (callback: (deltaTime: number) => void) => {\r\n//     let time = Date.now();\r\n//     let id = 0;\r\n//     let loop = () => {\r\n//         callback((Date.now() - time) * 0.001);\r\n//         time = Date.now();\r\n//     }\r\n//     loop();\r\n\r\n\r\n//     setInterval(loop, 1000 / 120)\r\n//     return {\r\n//         end: () => cancelAnimationFrame(id)\r\n//     };\r\n// }\r\n","import { IRenderer } from \"./IRenderer\";\r\nimport { Color } from \"./core/Color\";\r\nimport { Vector2D } from \"./core/Vector2D\";\r\n\r\nexport class Renderer implements IRenderer {\r\n    private context: CanvasRenderingContext2D;\r\n\r\n    constructor(context: CanvasRenderingContext2D) {\r\n        this.context = context;\r\n    }\r\n\r\n    clear(x: number, y: number, width: number, height: number): void {\r\n        const context = this.context;\r\n        context.fillStyle = \"rgba(0,0,0,0)\"\r\n        context.clearRect(x, y, width, height);\r\n    }\r\n\r\n    public drawCircle(x: number, y: number, r: number, color: Color): void {\r\n        const context = this.context;\r\n        context.fillStyle = color.rgba;\r\n        context.beginPath();\r\n        context.arc(x, y, r, 0, 2 * Math.PI);\r\n        context.closePath();\r\n        context.fill();\r\n    }\r\n\r\n    public drawStrokeCircle(x: number, y: number, r: number, lineWidth: number, color: Color): void {\r\n        const context = this.context;\r\n        context.strokeStyle = color.rgba;\r\n        context.beginPath();\r\n        context.arc(x, y, r, 0, 2 * Math.PI);\r\n        context.closePath();\r\n        context.stroke();\r\n    }\r\n\r\n    public drawLine(x1: number, y1: number, x2: number, y2: number, width: number, color: Color) {\r\n        const context = this.context;\r\n        context.strokeStyle = color.rgba;\r\n        context.beginPath();\r\n        context.lineTo(x1, y1);\r\n        context.lineTo(x2, y2);\r\n        context.closePath();\r\n        context.lineWidth = width;\r\n        context.stroke();\r\n    }\r\n\r\n    public pushMatrix() {\r\n        this.context.save();\r\n    }\r\n\r\n    public popMatrix() {\r\n        this.context.restore();\r\n    }\r\n\r\n    public translate(x: number, y: number) {\r\n        this.context.translate(x, y);\r\n    }\r\n\r\n    public beginPath() {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    public closePathFill(color: Color) {\r\n        this.context.closePath();\r\n        this.context.fillStyle = color.rgba;\r\n        this.context.fill();\r\n    }\r\n\r\n    public closePathStroke(color: Color) {\r\n        this.context.closePath();\r\n        this.context.strokeStyle = color.rgba;\r\n        this.context.stroke();\r\n    }\r\n\r\n    public rotate(angle: number) {\r\n        this.context.rotate(angle);\r\n    }\r\n\r\n    public lineTo(x: number, y: number) {\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    public moveTo(x: number, y: number) {\r\n        this.context.lineTo(x, y);\r\n    }\r\n}\r\n","/**\r\n * 2次元ベクトルを表します.\r\n */\r\nexport class Vector2D {\r\n    public x: number;\r\n    public y: number;\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n","\r\n/**\r\n * @summary 様々な色空間の色を表現するクラス\r\n */\r\nexport class Color {\r\n    // #region private fields\r\n    r = 0;\r\n    g = 0;\r\n    b = 0;\r\n    a = 1;\r\n\r\n    /**\r\n     * cssの文字列\r\n     */\r\n    get rgba(): string {\r\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`;\r\n    }\r\n    // #endregon\r\n\r\n    // #region public methods\r\n    // constructor(hex: string, alpha?: number)\r\n    // constructor(hsv: number[], alpha?: number);\r\n    // constructor(r: number, g: number, b: number);\r\n    // constructor(r: number, g: number, b: number, a: number);\r\n    constructor();\r\n    constructor(r: number, g: number, b: number, a?: number);\r\n    constructor(r: string, alpha?: number);\r\n    constructor(r?: string | number, g?: number, b?: number, a?: number) {\r\n        if (typeof (r) === \"string\") {\r\n            if (r.length !== 7 || r[0] !== \"#\") {\r\n                throw new Error(\"不正なカラーコードです。\");\r\n            }\r\n            const code = r;\r\n            this.r = parseInt(code.slice(1, 3), 16) & 255;\r\n            this.g = parseInt(code.slice(3, 5), 16) & 255;\r\n            this.b = parseInt(code.slice(5, 7), 16) & 255;\r\n            this.a = g || 1;\r\n        }\r\n        else if (typeof r === \"number\" && typeof g === \"number\" && typeof b === \"number\") {\r\n            this.r = r;\r\n            this.g = g;\r\n            this.b = b;\r\n            this.a = a || 1;\r\n        }\r\n        else {\r\n            throw new Error(\"不正なカラーコードです。\");\r\n        }\r\n    }\r\n\r\n    public static fromHsv(h: number, s: number, v: number, a = 1): Color {\r\n        // 引数処理\r\n        h = (h < 0 ? h % 360 + 360 : h) % 360 / 60;\r\n        s = s < 0 ? 0 : s > 1 ? 1 : s;\r\n        v = v < 0 ? 0 : v > 1 ? 1 : v;\r\n\r\n        // HSV to RGB 変換\r\n        const c = [5, 3, 1].map(function (i) {\r\n            return Math.round((v - Math.max(0, Math.min(1, 2 - Math.abs(2 - (h + i) % 6))) * s * v) * 255);\r\n        });\r\n\r\n        return new Color(\r\n            c[0],\r\n            c[1],\r\n            c[2],\r\n            a\r\n        );\r\n    }\r\n\r\n    toHsv() {\r\n        // 引数処理\r\n        let r = this.r;\r\n        let g = this.g;\r\n        let b = this.b;\r\n\r\n        let tmp = [r, g, b];\r\n        if (r !== undefined && g === undefined) {\r\n            const cc = parseInt(r.toString().replace(/[^\\da-f]/ig, '').replace(/^(.)(.)(.)$/, \"$1$1$2$2$3$3\"), 16);\r\n            tmp = [cc >> 16 & 0xff, cc >> 8 & 0xff, cc & 0xff];\r\n        }\r\n        else {\r\n            for (let i in tmp) tmp[i] = Math.max(0, Math.min(255, Math.floor(tmp[i])));\r\n        }\r\n        r = tmp[0];\r\n        g = tmp[1];\r\n        b = tmp[2];\r\n\r\n        // RGB to HSV 変換\r\n        const\r\n            v = Math.max(r, g, b), d = v - Math.min(r, g, b),\r\n            s = v ? d / v : 0, a = [r, g, b, r, g], i = a.indexOf(v),\r\n            h = s ? (((a[i + 1] - a[i + 2]) / d + i * 2 + 6) % 6) * 60 : 0;\r\n\r\n        // 戻り値\r\n        return { h: h, s: s, v: v / 255, a: this.a };\r\n    }\r\n\r\n\r\n    public static fromColorCode(code: string, alpha = 1) {\r\n        return new Color(code, alpha);\r\n    }\r\n\r\n    /**\r\n     * 16進数文字列へ変換\r\n     */\r\n    public toHexString() {\r\n        return `#${this.r.toString(16)}${this.g.toString(16)}${this.b.toString(16)}`;\r\n    }\r\n    // #endregion\r\n}\r\n","import { Color } from \"./Color\";\r\n\r\nconst colors = [\r\n    \"#3f51b5\",\r\n    \"#2196f3\",\r\n    \"#00bcd4\",\r\n    \"#009688\",\r\n    \"#4caf50\",\r\n    \"#cddc39\",\r\n    \"#ffeb3b\",\r\n    \"#ffc107\",\r\n    \"#ff9800\",\r\n    \"#ff5722\",\r\n    \"#f44336\",\r\n    \"#e91e63\",\r\n    \"#9c27b0\"\r\n];\r\n\r\n/**\r\n * @summary 乱数生成を提供します.\r\n */\r\nexport namespace Random {\r\n    export function next(n1 = 0, n2?: number): number {\r\n        if (!n2) {\r\n            return Math.floor(Math.random() * (n1 + 1));\r\n        }\r\n        if (n2) {\r\n            return Math.floor(Math.random() * (n2 + 1 - n1)) + n1;\r\n        }\r\n        return Math.floor(Math.random() * 1000);\r\n    }\r\n\r\n    export function nextDouble(): number {\r\n        return Math.random();\r\n    }\r\n\r\n    export function randomItem<T>(array: T[]): T {\r\n        return array[next(array.length - 1)];\r\n    }\r\n\r\n    export function getRandomColor(): Color {\r\n        return Color.fromColorCode(colors[next(colors.length - 1)]);\r\n    }\r\n}\r\n","import { Vector2D } from \"./Vector2D\";\r\nimport { Scene } from \"./Scene\";\r\nimport { MousePressedEvent } from \"./MouseEvent\";\r\n\r\nexport abstract class Actor {\r\n    tags: string[] = [];\r\n    abstract setup(scene: Scene): void;\r\n    abstract update(deltaTime: number, scene: Scene): void;\r\n    abstract pressed(e: MousePressedEvent): void;\r\n\r\n    public isDestroyed = false;\r\n\r\n    destroy() {\r\n        this.isDestroyed = true;\r\n    }\r\n}","import { Color } from \"../core/Color\";\r\nimport { Random } from \"../core/Random\";\r\nimport { Vector2D } from \"../core/Vector2D\";\r\nimport { IRenderer } from \"../IRenderer\";\r\nimport { Shape } from \"./Shape\";\r\n\r\ninterface MarbleCircleShapeOption {\r\n    color?: Color;\r\n    location?: Vector2D;\r\n    opacity?: number;\r\n    layersOverride?: Color[];\r\n    layerNum?:number;\r\n}\r\n\r\nexport class MarbleCircle extends Shape {\r\n    location = new Vector2D(0, 0);\r\n    size = 10;\r\n    opacity = 1;\r\n    layers!: Color[];\r\n    color?: Color;\r\n    layerNum=6;\r\n\r\n    constructor(option?: MarbleCircleShapeOption) {\r\n        super();\r\n\r\n        if (option) {\r\n            Object.assign(this, option);\r\n        }\r\n\r\n        if (!this.layers) {\r\n            const c = this.color ?? Random.getRandomColor();\r\n            this.layers = [...new Array(this.layerNum)].map(_ => c)\r\n                .map(c => {\r\n                    const hsv = c.toHsv();\r\n                    return Color.fromHsv(\r\n                        hsv.h,\r\n                        hsv.s - 0.3 + Random.nextDouble() * 0.3,\r\n                        hsv.v - 0.5 + Random.nextDouble() * 0.5,\r\n                        hsv.a);\r\n                })\r\n        }\r\n    }\r\n\r\n    draw(deltaTime: number, renderer: IRenderer): void {\r\n        let s = this.size;\r\n        for (const c of this.layers) {\r\n            c.a = this.opacity;\r\n            renderer.drawCircle(this.location.x, this.location.y, s, c);\r\n            s = Math.max(0, s - this.size * 0.2);\r\n        }\r\n    }\r\n}","export abstract class Shape {\r\n\r\n}","import { Vector2D } from \"./core/Vector2D\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Color } from \"./core/Color\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { MarbleCircle } from \"./shapes/MarbleCircle\";\r\n\r\n/// <summary>\r\n///\r\n/// </summary>\r\nexport class Food implements IColony {\r\n    get location(): Vector2D { return this.shape.location };\r\n    set location(value: Vector2D) { this.shape.location = value; };\r\n\r\n    get size() { return this.shape.size }\r\n    set size(value: number) { this.shape.size = value }\r\n\r\n    isDie = false;\r\n\r\n    shape: MarbleCircle;\r\n\r\n    /// <summary>\r\n    ///\r\n    /// </summary>\r\n    public constructor(location: Vector2D) {\r\n        this.shape = new MarbleCircle({\r\n            layersOverride: [Random.getRandomColor(), Random.getRandomColor(), Random.getRandomColor(), Random.getRandomColor()]\r\n        });\r\n\r\n        this.location = location;\r\n        this.size = 3 + Random.nextDouble();\r\n    }\r\n\r\n    vector: Vector2D = { x: 0, y: 0 };\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        this.shape.draw(deltaTime, scene.renderer);\r\n    }\r\n\r\n    translate(vector: Vector2D): void {\r\n        this.location.x += vector.x;\r\n        this.location.y += vector.y;\r\n    }\r\n\r\n    rotate(angle: number): void {\r\n    }\r\n}\r\n","import { Vector2D } from \"./core/Vector2D\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { IController } from \"./IController\";\r\nimport { Scene } from \"./core/Scene\";\r\n\r\nexport class SweyFallingController<T extends IColony> implements IController {\r\n    colony: T;\r\n    private waveOffcet = 0;\r\n    isDie = false;\r\n\r\n    speed = 80;\r\n    waveWidth = 60;\r\n\r\n    constructor(c: T) {\r\n        this.colony = c;\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        this.waveOffcet += 0.1;\r\n\r\n        const y = this.colony.location.y;\r\n        this.colony.translate({\r\n            x: Math.sin(this.waveOffcet) * this.waveWidth * deltaTime,\r\n            y: this.speed * deltaTime\r\n        });\r\n\r\n        if (y >= scene.height) {\r\n            this.isDie = true;\r\n        }\r\n\r\n        this.colony.update(deltaTime, scene);\r\n    }\r\n}","import { Actor } from \"./core/Actor\";\r\nimport { MousePressedEvent } from \"./core/MouseEvent\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { Food } from \"./Food\";\r\nimport { IController } from \"./IController\";\r\nimport { SweyFallingController } from \"./SwayFallingController\";\r\n\r\nexport class FoodProvider extends Actor {\r\n    foods: SweyFallingController<Food>[] = [];\r\n\r\n    setup(scene: Scene): void {\r\n\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        for (const food of this.foods) {\r\n            food.update(deltaTime, scene);\r\n\r\n            if (food.isDie) {\r\n                this.remove(food.colony);\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(food: Food) {\r\n        this.foods = this.foods.filter(x => x.colony !== food);\r\n    }\r\n\r\n    pressed(e: MousePressedEvent): void {\r\n        this.foods.push(\r\n            new SweyFallingController(\r\n                new Food({ x: e.position.x, y: 0 })\r\n            )\r\n        );\r\n    }\r\n}","import { Vector2D } from \"./core/Vector2D\";\r\nimport { Food } from \"./Food\";\r\nimport { IController } from \"./IController\";\r\nimport { Random } from \"./core/Random\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { IRenderer } from \"./IRenderer\";\r\nimport { Color } from \"./core/Color\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { Actor } from \"./core/Actor\";\r\nimport { MousePressedEvent } from \"./core/MouseEvent\";\r\nimport { FoodProvider } from \"./FoodProvider\";\r\n\r\nexport class TargetTrackingControllerOption {\r\n    public speedBias = 1;\r\n}\r\n\r\n/// <summary>\r\n///\r\n/// </summary>\r\nexport class TargetTrackingController<T extends IColony> extends Actor implements IController<T> {\r\n    colony: T;\r\n    public speed = 1.0;\r\n    speedBias = 2;\r\n    protected angle = 0;\r\n    targetLocation?: Vector2D;\r\n    food: Food | null = null;\r\n    smoothCurveRate: number;\r\n    autoTarget = true;\r\n    endForceTrack: null | (() => void) = null;\r\n    shockAvoidDistance = 80;\r\n    shockThreshouldDistance = 80;\r\n    foodTriggerDistance = 120;\r\n    isShowEnabled = true;\r\n    isFoodEnabled = true;\r\n    foodViewableAngleDeg = 160;\r\n    foodProvider: FoodProvider | null = null;\r\n    smoothCurveTriggerDistance = Infinity;\r\n\r\n    get isForceTracking() {\r\n        return !!this.endForceTrack;\r\n    }\r\n\r\n    noizeSize = 1;\r\n\r\n    public constructor(\r\n        colony: T,\r\n        speed = 125,\r\n        smoothCurveRate = 0.05\r\n    ) {\r\n        super();\r\n\r\n        this.colony = colony;\r\n        this.speedBias = speed;\r\n        this.smoothCurveRate = smoothCurveRate;\r\n        // colony.IsFlicking = false;\r\n    }\r\n\r\n    setup(scene: Scene): void {\r\n        const p = scene.actors.find(x => x instanceof FoodProvider);\r\n        if (p) {\r\n            this.foodProvider = p as FoodProvider;\r\n        }\r\n    }\r\n\r\n    pressed(e: MousePressedEvent): void {\r\n        this.shock(e.position);\r\n    }\r\n\r\n    c = Random.getRandomColor();\r\n\r\n    debug = false;\r\n\r\n    public update(deltaTime: number, scene: Scene) {\r\n        this.endForceTrack && this.endForceTrack();\r\n        const location = this.colony.location;\r\n\r\n        // 捕食できる餌がないかチェックしあればトラッキング\r\n        this.checkFoodAction(scene);\r\n\r\n        // 目的地が設定されていなければ目的地を初期化\r\n        if (!this.targetLocation && this.autoTarget) {\r\n            this.initTargetLocation(\r\n                new Vector2D(\r\n                    Random.next(scene.width),\r\n                    Random.next(scene.height)));\r\n            return;\r\n        }\r\n\r\n        if (!this.targetLocation) {\r\n            return;\r\n        }\r\n\r\n        this.debug && scene.renderer.drawCircle(this.targetLocation!.x, this.targetLocation!.y, 20, new Color(255, 255, 0))\r\n\r\n        let x = this.targetLocation.x - location.x;\r\n        let y = this.targetLocation.y - location.y;\r\n\r\n        const noisev = () => Math.random() * 0.5 * this.speed * this.noizeSize;\r\n\r\n        const angleDiff = Math.atan2(y, x);\r\n        this.angle = Numerics.lerpAngle(this.angle, angleDiff, this.smoothCurveRate);\r\n\r\n        // 線形補間した角度をベクトル変換し足すことで、滑らかに大まわりに回転させる\r\n        if (Numerics.dist(this.targetLocation, location) > this.smoothCurveTriggerDistance) {\r\n            x = Math.cos(this.angle);\r\n            y = Math.sin(this.angle);\r\n        }\r\n\r\n        // 正規化してスピードとデルタタイムを合わせる\r\n        const vector = Numerics.normalize(new Vector2D(x, y));\r\n        const vx = vector.x * this.speed + noisev();\r\n        const vy = vector.y * this.speed + noisev();\r\n\r\n        this.colony.translate(new Vector2D(vx * deltaTime, vy * deltaTime));\r\n        this.colony.rotate(this.angle);\r\n        this.colony.update(deltaTime, scene);\r\n\r\n        // 次回のフレームで初期化させるため\r\n        if (Numerics.dist(this.colony.location, this.targetLocation) <= 20.0) {\r\n            if (this.autoTarget && !this.isForceTracking)\r\n                this.targetLocation = undefined;\r\n        }\r\n    }\r\n\r\n    public initTargetLocation(location: Vector2D) {\r\n        this.targetLocation = location;\r\n        this.speed = this.speedBias * (1.0 + Random.nextDouble() * 0.5);\r\n    }\r\n\r\n    public translateTargetLocation(location: Vector2D, speed?: number) {\r\n        if (this.isForceTracking || this.food) {\r\n            return;\r\n        }\r\n\r\n        if (speed) this.speed = speed;\r\n\r\n        if (!this.targetLocation)\r\n            this.targetLocation = ({\r\n                x: location.x,\r\n                y: location.y\r\n            });\r\n        else\r\n            this.targetLocation = ({\r\n                x: this.targetLocation.x + location.x,\r\n                y: this.targetLocation.y + location.y\r\n            });\r\n    }\r\n\r\n    public shock(inputlocation: Vector2D) {\r\n        const location = this.colony.location;\r\n\r\n        if (Numerics.dist(inputlocation, location) <= this.shockThreshouldDistance) {\r\n            this.endForceTrack && this.endForceTrack();\r\n\r\n            // 入力の座標とプリミティブの座標のベクトルの逆の地点を目的地へ設定\r\n            // 速度も上げる\r\n            const vec = Numerics.normalize(new Vector2D(\r\n                inputlocation.x - location.x,\r\n                inputlocation.y - location.y));\r\n            const x = location.x - vec.x * this.shockAvoidDistance;\r\n            const y = location.y - vec.y * this.shockAvoidDistance;\r\n\r\n            const lastSpeed = this.speed;\r\n            const target = this.targetLocation;\r\n\r\n            this.targetLocation = new Vector2D(x, y);\r\n            this.speed = this.speedBias * 5;\r\n            this.endForceTrack = () => {\r\n                if (!this.targetLocation) {\r\n                    return;\r\n                }\r\n\r\n                if (Numerics.dist(this.colony.location, this.targetLocation) <= 20.0) {\r\n                    this.speed = lastSpeed;\r\n                    this.targetLocation = target;\r\n                    this.endForceTrack = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public checkFoodAction(scene: Scene) {\r\n        const getEatableFood = () => {\r\n            if (!this.foodProvider) {\r\n                return;\r\n            }\r\n\r\n            const foods = this.foodProvider.foods;\r\n            if (foods.length > 0) {\r\n                // 一番近い餌を格納\r\n                let food = foods[0].colony;\r\n                for (let i = 1; i < foods.length; i++) {\r\n                    if (\r\n                        Numerics.dist(\r\n                            this.colony.location,\r\n                            foods[i].colony.location)\r\n                        <\r\n                        Numerics.dist(\r\n                            this.colony.location,\r\n                            food.location)\r\n                    ) {\r\n                        food = foods[i].colony;\r\n                    }\r\n                }\r\n\r\n                if (Numerics.dist(this.colony.location, food.location) <= this.foodTriggerDistance) {\r\n                    const angleDiff = Math.atan2(food.location.y - this.colony.location.y, food.location.x - this.colony.location.x);\r\n                    const a = Math.atan2(this.colony.vector.y, this.colony.vector.x);\r\n                    if (Math.abs(a - angleDiff) < Numerics.toRadians(this.foodViewableAngleDeg * 0.5)) {\r\n                        return food;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        const f = getEatableFood();\r\n        if (f) {\r\n            if (this.food || this.endForceTrack) {\r\n                return;\r\n            }\r\n\r\n            const target = this.targetLocation;\r\n            const lastSpeed = this.speed;\r\n\r\n            this.targetLocation = f.location;\r\n            this.speed = this.speedBias * 1.8;\r\n            this.food = f;\r\n\r\n            this.endForceTrack = () => {\r\n                if (!this.foodProvider) {\r\n                    return;\r\n                }\r\n\r\n                if (!this.food || Numerics.dist(this.colony.location, this.food.location) <= 10.0) {\r\n\r\n                    if (this.food) {\r\n                        this.foodProvider.remove(this.food);\r\n                    }\r\n                    this.food = null;\r\n                    this.targetLocation = target;\r\n                    this.speed = lastSpeed;\r\n                    this.endForceTrack = null;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.food = null;\r\n        }\r\n    }\r\n}\r\n","import { IColony } from \"./IColoney\";\r\nimport { IController } from \"./IController\";\r\nimport { Vector2D } from \"./core/Vector2D\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { TargetTrackingController } from \"./TargetTrackingController\";\r\n\r\n/// <summary>\r\n/// コントローラーを群れとして表現します。\r\n/// </summary>\r\n/// <typeparam name=\"T\"></typeparam>\r\nexport class BoidController extends TargetTrackingController<IColony> implements IController {\r\n    /// <summary>\r\n    /// 群れに属する図形のリスト\r\n    /// </summary>\r\n    public readonly boids: TargetTrackingController<IColony>[] = [];\r\n\r\n    /// <summary>\r\n    /// ボスとなる図形\r\n    /// </summary>\r\n    public get boss() {\r\n        return this.colony;\r\n    }\r\n\r\n    avoidThresholdDist = 30;\r\n\r\n    readonly r1 = 8; // パラメータ：群れの中心に向かう度合\r\n    readonly r2 = 16; // パラメータ：仲間を避ける度合\r\n    readonly r3 = 2 // パラメータ：群れの平均速度に合わせる度合\r\n\r\n    angle = 0;\r\n\r\n    /// <summary>\r\n    /// コンストラクタ1\r\n    /// </summary>1\r\n    /// <param name=\"controller\"></param>\r\n    public constructor(boss: IColony) {\r\n        super(boss);\r\n    }\r\n\r\n    // setSpeed(speed: number) {\r\n    //     this.speedBias = speed;\r\n    // }\r\n\r\n    scene: Scene | null = null;\r\n\r\n    setup(scene: Scene): void {\r\n        super.setup(scene);\r\n        for (const item of this.boids) {\r\n            item.setup(scene);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 群れとして表現するコントローラーを追加します。\r\n    /// </summary>\r\n    /// <param name=\"colony\"></param>\r\n    public addBoid(controller: TargetTrackingController<IColony>) {\r\n        this.boids.push(controller);\r\n        this.scene && controller.setup(this.scene);\r\n        controller.autoTarget = false;\r\n        controller.smoothCurveTriggerDistance = Infinity;\r\n        controller.noizeSize = 0;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 描画処理\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画するキャンバス</param>\r\n    /// <param name=\"deltaTime\">直前の描画にかかった時間</param>\r\n    public update(deltaTime: number, scene: Scene) {\r\n        // const movement = this.getMovementVector(this.boss);\r\n        // this.boss.translate(movement);\r\n        super.update(deltaTime, scene);\r\n\r\n\r\n        for (const item of this.boids) {\r\n            // item.checkFoodAction();\r\n\r\n            // if (!item.targetLocation) {\r\n            this.drawAsBoid(item, deltaTime, scene);\r\n            //  }\r\n        }\r\n\r\n        // DEBUG\r\n        // this.targetLocation && scene.renderer.drawCircle(this.targetLocation!.x, this.targetLocation.y, 20, new Color(255, 0, 0, 0))\r\n    }\r\n\r\n    private drawAsBoid(controller: TargetTrackingController<IColony>, deltaTime: number, scene: Scene) {\r\n        const movement = this.getMovementVector(controller.colony);\r\n\r\n        // 1フレームでtargetLocationに到達させる\r\n        const speed = Numerics.dist(\r\n            controller.colony.location,\r\n            new Vector2D(\r\n                movement.x + (controller.targetLocation?.x ?? 0),\r\n                movement.y + (controller.targetLocation?.y ?? 0)\r\n            ));\r\n        controller.translateTargetLocation(\r\n            new Vector2D(\r\n                movement.x,\r\n                movement.y\r\n            ),\r\n            speed);\r\n        controller.update(deltaTime, scene);\r\n    }\r\n\r\n    getMovementVector(colony: IColony): Vector2D {\r\n        let vx = 0;\r\n        let vy = 0;\r\n\r\n        let result = this.getVectorToCenter(colony);\r\n        vx += result.x * this.r1;\r\n        vy += result.y * this.r1;\r\n\r\n        result = this.getVectorToAvoid(colony);\r\n        vx += result.x * this.r2;\r\n        vy += result.y * this.r2;\r\n        result = this.getVectorToAverage(colony);\r\n        vx += result.x * this.r3;\r\n        vy += result.y * this.r3;\r\n\r\n        vx /= 3;\r\n        vy /= 3;\r\n\r\n        return {\r\n            x: vx,\r\n            y: vy\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    ///\r\n    /// </summary>\r\n    private getVectorToCenter(colony: IColony): Vector2D {\r\n        let vx = 0; let vy = 0;\r\n        const x = colony.location.x;\r\n        const y = colony.location.y;\r\n\r\n        for (const item of this.boids) {\r\n            // 参照が同じであればcontinue\r\n            if (item.colony === colony) {\r\n                continue;\r\n            }\r\n            const location = item.colony.location;\r\n            vx += location.x;\r\n            vy += location.y;\r\n        }\r\n\r\n        const count = this.boids.length - 1;\r\n        vx /= count;\r\n        vy /= count;\r\n\r\n        vx += this.boss.location.x;\r\n        vy += this.boss.location.y;\r\n        vx /= 2;\r\n        vy /= 2;\r\n\r\n        return Numerics.normalize(new Vector2D(vx - x, vy - y));\r\n    }\r\n\r\n    /// <summary>\r\n    ///\r\n    /// </summary>\r\n    private getVectorToAvoid(colony: IColony): Vector2D {\r\n        const avoidThresholdDist = this.avoidThresholdDist;\r\n        let vx = 0; let vy = 0;\r\n        for (const item of this.boids) {\r\n            // 参照が同じであればcontinue\r\n            if (item.colony === colony) {\r\n                continue;\r\n            }\r\n\r\n            const location = item.colony.location;\r\n            if (Numerics.dist(location, colony.location) < avoidThresholdDist) {\r\n                vx -= (location.x - colony.location.x);\r\n                vy -= (location.y - colony.location.y);\r\n            }\r\n        }\r\n\r\n        const boss = this.boss;\r\n        if (Numerics.dist(boss.location, colony.location) < avoidThresholdDist) {\r\n            vx -= boss.location.x - colony.location.x;\r\n            vy -= boss.location.y - colony.location.y;\r\n        }\r\n\r\n        return Numerics.normalize(new Vector2D(vx, vy));\r\n    }\r\n\r\n    /// <summary>\r\n    /// 整列\r\n    /// </summary>\r\n    private getVectorToAverage(colony: IColony): Vector2D {\r\n        let vx = 0; let vy = 0;\r\n\r\n        for (const item of this.boids) {\r\n            // 参照が同じであればcontinue\r\n            if (item.colony === colony) {\r\n                continue;\r\n            }\r\n            const vector = item.colony.vector;\r\n            vx += vector.x;\r\n            vy += vector.y;\r\n        }\r\n\r\n        vx += this.boss.vector.x;\r\n        vy += this.boss.vector.y;\r\n\r\n        // count = boids - own + boss\r\n        const count = this.boids.length;\r\n        vx /= count;\r\n        vy /= count;\r\n\r\n        return Numerics.normalize(new Vector2D(vx, vy));\r\n    }\r\n\r\n    shock(location: Vector2D) {\r\n        super.shock(location);\r\n\r\n        for (const item of this.boids) {\r\n            item.shock(location);\r\n        }\r\n    }\r\n}\r\n","import { Vector2D } from \"./core/Vector2D\";\r\nimport { Color } from \"./core/Color\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { IRenderer } from \"./IRenderer\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { IComponent } from \"./Component\";\r\n\r\n/// <summary>\r\n/// 魚を表現します。\r\n/// </summary>\r\nexport class Fish implements IColony {\r\n    /// <summary>\r\n    /// 各セグメントの座標を格納\r\n    /// </summary>\r\n    segmentlocation =new Array<Vector2D>(10);\r\n\r\n    /// <summary>\r\n    /// プリミティブの座標\r\n    /// </summary>\r\n    location = new Vector2D(0, 0);\r\n\r\n    /// <summary>\r\n    /// セグメントの長さ\r\n    /// </summary>\r\n    segLength = 14.0;\r\n\r\n    /// <summary>\r\n    /// サイズ\r\n    /// </summary>\r\n    size = 0.22;\r\n\r\n    /// <summary>\r\n    /// 色の選択用\r\n    /// </summary>\r\n\r\n    /// <summary>\r\n    /// ヒレの角度\r\n    /// </summary>\r\n    finAngle = 0;\r\n\r\n    /// <summary>\r\n    /// ヒレの動きの折り返し用\r\n    /// </summary>\r\n    finDirection = 30;\r\n\r\n    /// <summary>\r\n    /// 点滅させるセグメントのインデックス\r\n    /// </summary>\r\n    lightSegmentIndex = -1;\r\n\r\n    /// <summary>\r\n    /// プリミティブのカラー\r\n    /// </summary>\r\n    color: Color;\r\n\r\n    /// <summary>\r\n    /// 点滅しているかどうか\r\n    /// </summary>\r\n    isFlicking = false;\r\n\r\n    angle = 0;\r\n\r\n    /// <summary>\r\n    /// 点滅の状態を制御\r\n    /// </summary>\r\n    public isFlicking_ = false;\r\n    //         {\r\n    //     get\r\n    //     {\r\n    //         return isFlicking;\r\n    //     }\r\n    //     set\r\n    //     {\r\n    //         if (value && !isFlicking)\r\n    //         {\r\n    //             isFlicking = true;\r\n    //             BeginBrightness();\r\n    //         }\r\n    //         else if (!value)\r\n    //         {\r\n    //             isFlicking = false;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    /// <summary>\r\n    /// コンストラクタ\r\n    /// </summary>\r\n    public constructor(\r\n        location: Vector2D = new Vector2D(0, 0),\r\n        color?: Color\r\n    ) {\r\n        this.location = location;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            this.segmentlocation[i] = new Vector2D(0, 0);\r\n        }\r\n\r\n        this.color = color || Random.getRandomColor();\r\n    }\r\n\r\n    public rotate(angle: number): void {\r\n        this.angle = angle;\r\n    }\r\n\r\n    private beginBrightness() {\r\n        // Task.Run(async () =>\r\n        // {\r\n        //     while (true)\r\n        //     {\r\n        //         if (!isFlicking)\r\n        //         {\r\n        //             return;\r\n        //         }\r\n        //         await Task.Delay(80);\r\n        //         lightSegmentIndex++;\r\n        //         e++;\r\n        //         // オフセット\r\n        //         if (8 < lightSegmentIndex)\r\n        //         {\r\n        //             lightSegmentIndex = 2;\r\n        //             await Task.Delay(800);\r\n        //         }\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    vector = new Vector2D(0, 0);\r\n\r\n    /// <summary>\r\n    /// 移動量（Vector）をセットします。\r\n    /// </summary>\r\n    /// <param name=\"vector\"></param>\r\n    /// <param name=\"angle\"></param>\r\n    public translate(vector: Vector2D) {\r\n        this.vector = vector;\r\n    }\r\n\r\n    public update(deltaTime: number, scene: Scene) {\r\n        this.location.x += this.vector.x;\r\n        this.location.y += this.vector.y;\r\n\r\n        this.drawSegment(0, this.location.x, this.location.y, scene, deltaTime);\r\n        for (let i = 0; i < 8; i++) {\r\n            this.drawSegment(i + 1, this.segmentlocation[i].x, this.segmentlocation[i].y, scene, deltaTime);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// セグメントをひとつづつ描画\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画用キャンバス</param>\r\n    /// <param name=\"i\">対象の1つ後ろのセグメントのインデックス</param>\r\n    /// <param name=\"xin\">対象のセグメントのx座標</param>\r\n    /// <param name=\"yin\">対象のセグメントのy座標</param>\r\n    private drawSegment(i: number, xin: number, yin: number, scene: Scene, deltaTime: number) {\r\n        const dx = xin - this.segmentlocation[i].x;\r\n        const dy = yin - this.segmentlocation[i].y;\r\n        const angle = Math.atan2(dy, dx);\r\n        const x = this.segmentlocation[i].x = (xin - Math.cos(angle) * this.segLength * this.size);\r\n        const y = this.segmentlocation[i].y = (yin - Math.sin(angle) * this.segLength * this.size);\r\n        const renderer = scene.renderer;\r\n\r\n        // セグメントを光らせる\r\n        if (i === this.lightSegmentIndex) {\r\n\r\n            // .paintColor = paint.Color = Config.FishColorList[e % 7];\r\n        }\r\n        else {\r\n            // paint.Color = paint.Color = color;\r\n        }\r\n\r\n        // 最初のセグメント\r\n        if (i === 1) {\r\n            // ヒレの描画\r\n            // ヒレを動かす\r\n            this.finAngle = Numerics.lerp(this.finAngle, this.finDirection, 0.04) * deltaTime;\r\n            if (this.finAngle >= 13) {\r\n                this.finDirection = 0;\r\n            }\r\n            if (this.finAngle <= 2) {\r\n                this.finDirection = 15;\r\n            }\r\n\r\n            renderer.drawLine(\r\n                x + Math.cos(angle + Numerics.toRadians(120)) * 10 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(120)) * 10 * this.size,\r\n                x + Math.cos(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                3 * this.size,\r\n                this.color\r\n            );\r\n            renderer.drawLine(\r\n                x + Math.cos(angle + Numerics.toRadians(-120)) * 10 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(-120)) * 10 * this.size,\r\n                x + Math.cos(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                3 * this.size,\r\n                this.color\r\n            );\r\n\r\n            // ヒレ先端の点\r\n            // this.renderer.fill();\r\n\r\n            renderer.drawCircle(\r\n                x + Math.cos(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                4 * this.size,\r\n                this.color\r\n            );\r\n            renderer.drawCircle(\r\n                x + Math.cos(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                4 * this.size,\r\n                this.color\r\n            );\r\n\r\n            renderer.drawCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                (10 - i) * 1.2 * this.size,\r\n                this.color\r\n            );\r\n        }\r\n        // 奇数列\r\n        else if (i % 2 === 1) {\r\n            renderer.drawCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                1.5 * this.size,\r\n                this.color\r\n            );\r\n            renderer.drawStrokeCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                (10 - i) * 1.2 * this.size,\r\n                7,\r\n                this.color\r\n            );\r\n        }\r\n        // 偶数列\r\n        else {\r\n            renderer.drawCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                (10 - i) * 0.5 * this.size,\r\n                this.color);\r\n        }\r\n    }\r\n}\r\n","import { Vector2D } from \"./core/Vector2D\";\r\nimport { IController } from \"./IController\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { Color } from \"./core/Color\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { IRenderer } from \"./IRenderer\";\r\nimport { Scene } from \"./core/Scene\";\r\n\r\nexport const CAP_JOINT_COUNT = 10; //  笠のポイントの数\r\nexport const ROUND_DEGREE = 360; //  一周の角度\r\nexport const HEAD_DETAIL = 30; //  笠の細かさ(描画する角度の閾値)\r\n\r\n/// <summary>\r\n/// 海月を表現します。\r\n/// </summary>\r\nexport class Jellyfish implements IColony {\r\n    capPointAngle = Array<number>(CAP_JOINT_COUNT); //  笠のそれぞれのポイントの広がり角度\r\n\r\n    public capPointAngleBase = 0; //  笠の動きのベース広がり角度\r\n    public capPointAngleBaseSpd = 0; //  笠の動きベースの速度\r\n    public headWitherPower: number; //  笠のしぼみ具合\r\n    public headSize: number; //  笠の大きさ\r\n\r\n    paintColor: Color;\r\n    headFillPaintColor: Color;\r\n    location: Vector2D;\r\n    angle = 0;\r\n\r\n    /// <summary>\r\n    /// コンストラクタ\r\n    /// </summary>\r\n    public constructor(location: Vector2D = new Vector2D(0, 0)) {\r\n        this.location = location;\r\n        const col = Random.getRandomColor();\r\n        this.headFillPaintColor = new Color(col.r, col.g, col.b, 0.6);\r\n\r\n        this.paintColor = new Color(col.r, col.g, col.b, 0.6);\r\n\r\n        // かさのくねくねの動きの速さを決める\r\n        this.capPointAngleBaseSpd = (0.4 + Random.nextDouble() * 0.25);\r\n        // 笠の大きさを決める\r\n        this.headSize = 6 + (Random.next(5) + Random.nextDouble());\r\n        // 笠のしぼみ具合を決める\r\n        this.headWitherPower = 0.11;\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        this.draw(deltaTime, scene);\r\n    }\r\n\r\n    vector = new Vector2D(0, 0);\r\n\r\n    /**\r\n     * プリミティブを描画します。\r\n     * @param canvas 描画するキャンバス\r\n     * @param location 描画する場所\r\n     * @param angle デルタタイム\r\n     */\r\n    public draw(deltaTime: number, scene: Scene): void {\r\n        const renderer = scene.renderer;\r\n\r\n        renderer.pushMatrix();\r\n        renderer.translate(this.location.x, this.location.y);\r\n        renderer.rotate(this.angle + Numerics.toRadians(90));\r\n\r\n        // 笠のポイントの広がり角度を、末端のポイントに伝える\r\n        // 笠の列のカーブ（角度）を格納した配列を作成\r\n        for (let i = 0; i < CAP_JOINT_COUNT - 1; i++) {\r\n            this.capPointAngle[i] = this.capPointAngle[i + 1] + i;\r\n        }\r\n\r\n        this.capPointAngleBase += this.capPointAngleBaseSpd * deltaTime;\r\n        this.capPointAngle[9] = (Math.abs(Math.sin(this.capPointAngleBase)) * 30 + 20);\r\n\r\n        this.drawFillHead(renderer);\r\n        this.drawHeadFrame(renderer);\r\n\r\n        renderer.popMatrix();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 移動量（Vector）をセットします。\r\n    /// </summary>\r\n    /// <param name=\"vector\"></param>\r\n    /// <param name=\"angle\"></param>\r\n    public translate(vector: Vector2D) {\r\n        this.location.x += vector.x;\r\n        this.location.y += vector.y;\r\n\r\n        this.vector = vector;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 移動量（Vector）をセットします。\r\n    /// </summary>\r\n    /// <param name=\"vector\"></param>\r\n    /// <param name=\"angle\"></param>\r\n    public rotate(angle: number) {\r\n        this.angle = angle;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 笠のフレームを描画\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画するキャンバス</param>\r\n    private drawHeadFrame(renderer: IRenderer) {\r\n        renderer.beginPath();\r\n        for (let r = 90; r <= 270; r += 30) {\r\n            let x = 0; let y = 0;\r\n            let tx = 0; let ty = 0;\r\n            let p = 1;\r\n            for (let j = 0; j < CAP_JOINT_COUNT; j++) {\r\n                p -= this.headWitherPower;\r\n                const deg = this.capPointAngle[j];\r\n                x += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r)) * p);\r\n                y += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n\r\n                tx += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r + HEAD_DETAIL)) * p);\r\n                ty += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n\r\n                renderer.lineTo(x, y);\r\n                renderer.lineTo(tx, ty);\r\n            }\r\n        }\r\n        renderer.closePathFill(this.paintColor);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 笠を描画\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画するキャンバス</param>\r\n    private drawFillHead(renderer: IRenderer) {\r\n        let p = 1;\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        renderer.beginPath();\r\n        renderer.moveTo(0, 0);\r\n\r\n        let r = 90;\r\n\r\n        for (let i = 0; i < CAP_JOINT_COUNT; i++) {\r\n            p -= this.headWitherPower;\r\n            const deg = this.capPointAngle[i];\r\n            x += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r)) * p);\r\n            y += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n            renderer.lineTo(x, y);\r\n        }\r\n\r\n        p = 1;\r\n        x = 0;\r\n        y = 0;\r\n        r = 270;\r\n        const stack: Vector2D[] = [];\r\n        for (let i = 0; i < CAP_JOINT_COUNT; i++) {\r\n            p -= this.headWitherPower;\r\n            const deg = this.capPointAngle[i];\r\n            x += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r)) * p);\r\n            y += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n            stack.unshift(new Vector2D(x, y));\r\n        }\r\n        for (const stackPoint of stack) {\r\n            renderer.lineTo(stackPoint.x, stackPoint.y);\r\n        }\r\n        renderer.closePathFill(this.headFillPaintColor);\r\n    }\r\n}\r\n","import { Actor } from \"./core/Actor\";\r\nimport { Color } from \"./core/Color\";\r\nimport { MousePressedEvent } from \"./core/MouseEvent\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { Vector2D } from \"./core/Vector2D\";\r\nimport { IColony } from \"./IColoney\";\r\n\r\nexport class Branch implements IColony {\r\n    private wave = 0;\r\n    readonly segments;\r\n    angle = 0;\r\n    private wave2 = 0;\r\n\r\n    color = Random.getRandomColor();\r\n    readonly segmentLength = Random.next(18, 23);\r\n    readonly maxSegmentPointSize = 5;\r\n    speed = 0.1;\r\n\r\n    readonly points: number[] = [];\r\n    readonly pointFlickingSpeeds: number[] = [];\r\n\r\n    constructor(location?: Vector2D) {\r\n        this.wave2 = Random.next(1000);\r\n        this.segments = 3 + Random.next(8);\r\n        this.angle = Random.next(0, 360);\r\n\r\n        this.points = [...new Array(this.segments)].map(x => Random.next(this.segments) + Random.nextDouble());\r\n        this.pointFlickingSpeeds = [...new Array(this.segments)].map(x => Random.next(20, 30));\r\n\r\n        console.log(this.points)\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        const renderer = scene.renderer;\r\n\r\n        renderer.pushMatrix();\r\n        renderer.translate(this.location.x, this.location.y);\r\n        renderer.rotate(Numerics.toRadians(this.angle));\r\n\r\n        let wave = this.wave;\r\n        const segments = this.segments;\r\n        let wave2 = this.wave2;\r\n        const rand = () => Random.nextDouble() * 0.1 * (Random.next(0, 1) === 0 ? -1 : 1);\r\n\r\n        const c = this.color;\r\n        const bgc = new Color(c.r, c.g, c.b, 0.26);\r\n        const pc = new Color(c.r, c.g, c.b, 0.8);\r\n        const segmentLength = this.segmentLength;\r\n        const maxSegmentPointSize = this.maxSegmentPointSize;\r\n        const points = this.points;\r\n        const pointFlickingSpeeds = this.pointFlickingSpeeds;\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            const t = Random.next(maxSegmentPointSize - 1) + Random.nextDouble();\r\n            // 2種類のwaveを重ね合わせることで、不規則なぐにゃぐにゃを表現\r\n            const theta = (Math.sin(wave2) * 5 + Math.sin(wave) * 10 + rand());\r\n\r\n            const to = Numerics.lerp(segmentLength, segmentLength * 0.5, i / segments);\r\n            points[i] += pointFlickingSpeeds[i] * deltaTime;\r\n            const width = Math.abs(Math.sin(points[i])) * maxSegmentPointSize;\r\n\r\n            renderer.rotate(Numerics.toRadians(theta));\r\n            renderer.drawLine(0, 0, 0, to, width, bgc);\r\n            renderer.drawCircle(0, 0, width * 0.5, pc);\r\n            renderer.translate(0, to);\r\n\r\n            wave2 += this.speed * 0.1 * deltaTime;\r\n            wave += this.speed;\r\n        }\r\n\r\n        renderer.drawCircle(0, 0, Math.abs(Math.sin(points[0])) * maxSegmentPointSize * 0.5, pc);\r\n\r\n        this.wave2 = wave2;\r\n        this.wave += this.speed * deltaTime;\r\n\r\n        renderer.popMatrix();\r\n    }\r\n\r\n    pressed(e: MousePressedEvent): void {\r\n\r\n    }\r\n\r\n    location = new Vector2D(0, 0);\r\n    vector = new Vector2D(0, 0);\r\n\r\n    translate(vector: Vector2D): void {\r\n\r\n    }\r\n\r\n    rotate(angle: number): void {\r\n\r\n    }\r\n\r\n}\r\n\r\ninterface LophophorataOption {\r\n    location?: Vector2D;\r\n    branchCount?: number;\r\n}\r\n\r\nexport class Lophophorata extends Actor implements IColony {\r\n    setup(scene: Scene): void {\r\n    }\r\n    pressed(e: MousePressedEvent): void {\r\n\r\n    }\r\n    location = new Vector2D(0, 0);\r\n    vector = new Vector2D(0, 0);\r\n    branchCount = 20;\r\n\r\n    branches: Branch[] = [];\r\n\r\n    jointLayerColors = [Random.getRandomColor(), Random.getRandomColor(), Random.getRandomColor(), Random.getRandomColor()]\r\n    jointCircleSize = 14;\r\n\r\n    constructor(option?: LophophorataOption) {\r\n        super();\r\n        if (option) {\r\n            Object.assign(this, option);\r\n        }\r\n\r\n        const branches = [];\r\n        for (let i = 0; i < this.branchCount; i++) {\r\n            branches.push(new Branch())\r\n        }\r\n        this.branches = branches;\r\n    }\r\n\r\n    translate(vector: Vector2D): void {\r\n        this.vector = vector;\r\n        this.location = new Vector2D(this.location.x + vector.x, this.location.y + vector.y);\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n\r\n        const render = scene.renderer;\r\n\r\n        for (const b of this.branches) {\r\n            b.location = this.location;\r\n            b.update(deltaTime, scene);\r\n        }\r\n\r\n        let i = this.jointCircleSize;\r\n        for (const color of this.jointLayerColors) {\r\n            render.drawCircle(this.location.x, this.location.y, i, color);\r\n            i -= 3;\r\n        }\r\n    }\r\n\r\n    rotate(angle: number): void {\r\n\r\n    }\r\n}\r\n","import { Actor } from \"./core/Actor\";\r\nimport { Color } from \"./core/Color\";\r\nimport { MousePressedEvent } from \"./core/MouseEvent\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { Vector2D } from \"./core/Vector2D\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { IRenderer } from \"./IRenderer\";\r\nimport { MarbleCircle } from \"./shapes/MarbleCircle\";\r\n\r\nexport class Ripple implements IColony {\r\n    shape = new MarbleCircle();\r\n    locatoin = new Vector2D(300, 300);\r\n    vector = new Vector2D(0, 0);\r\n\r\n    get location(): Vector2D { return this.shape.location };\r\n    set location(value: Vector2D) { this.shape.location = value; };\r\n\r\n    get isDie() { return this.shape.opacity < 0 }\r\n\r\n    growingSpeed = 40;\r\n    paledOutSpeed = 1;\r\n\r\n    constructor(location: Vector2D) {\r\n        this.location = location;\r\n    }\r\n\r\n    translate(vector: Vector2D): void {\r\n\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        const shape = this.shape;\r\n\r\n        shape.opacity -= 1 * deltaTime;\r\n        shape.size += this.growingSpeed * deltaTime;\r\n        shape.draw(deltaTime, scene.renderer);\r\n    }\r\n\r\n    rotate(angle: number): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n\r\n\r\nexport class RippleServer extends Actor {\r\n    ripples: Ripple[] = [];\r\n\r\n    setup(scene: Scene): void {\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        for (const r of this.ripples) {\r\n            r.update(deltaTime, scene);\r\n            if (r.isDie)\r\n                this.ripples = this.ripples.filter(x => r !== x)\r\n        }\r\n    }\r\n\r\n    pressed(e: MousePressedEvent): void {\r\n        this.ripples.push(new Ripple(e.position));\r\n    }\r\n}","import * as React from \"react\"\nimport { Size, Typography } from \"@material-ui/core\"\nimport { Coloney } from \"../components/Colony\"\nimport { Scene } from \"colony/src/lib/core/Scene\"\nimport { Renderer } from \"colony/src/lib/Renderer\"\nimport { Random } from \"colony/src/lib/core/Random\"\nimport { BoidController } from \"colony/src/lib/BoidController\"\nimport { TargetTrackingController } from \"colony/src/lib/TargetTrackingController\"\nimport { Fish } from \"colony/src/lib/Fish\"\nimport { Vector2D } from \"colony/src/lib/core/Vector2D\"\nimport { Jellyfish } from \"colony/src/lib/JellyFish\"\nimport { FoodProvider } from \"colony/src/lib/FoodProvider\"\nimport \"normalize.css\";\nimport { Color } from \"../../../src/lib/core/Color\"\nimport { Lophophorata } from \"colony/src/lib/Lophophorata\";\nimport { RippleServer } from \"colony/src/lib/RippleServer\";\n\nlet scene: Scene | null = null;\n\nconst init = (context: CanvasRenderingContext2D, size: { width: number, height: number }) => {\n    scene = new Scene(size.width, size.height, new Renderer(context))\n\n    console.log(size)\n    scene.append(new FoodProvider());\n\n    scene.append(new RippleServer());\n    scene.append(new Lophophorata({\n        location: new Vector2D(400, 400)\n    }));\n\n    scene.append(\n        new TargetTrackingController(\n            new Jellyfish(\n                new Vector2D(\n                    240,\n                    280\n                )\n            ),\n            6));\n    scene.append(\n        new TargetTrackingController(\n            new Jellyfish(\n                new Vector2D(\n                    120,\n                    360\n                )\n            ),\n            6));\n\n    const s = new TargetTrackingController(\n        new Jellyfish(\n            new Vector2D(\n                220,\n                500\n            )\n        ),\n        6);\n    scene.append(s\n    );\n\n    for (const code of [\n        \"#3f51b5\",\n        \"#2196f3\",\n        \"#00bcd4\",\n        \"#009688\",\n        \"#4caf50\",\n        \"#cddc39\",\n        \"#ffeb3b\",\n        \"#ffc107\",\n        \"#ff9800\",\n        \"#ff5722\",\n        \"#f44336\",\n        \"#e91e63\",\n        \"#9c27b0\"\n    ]) {\n        const c = Color.fromColorCode(code);\n\n        const boid = new BoidController(\n            new Fish(\n                new Vector2D(\n                    0,\n                    0\n                ),\n                c\n            )\n        );\n\n        scene.append(boid);\n\n        for (let j = 0; j < 5; j++) {\n            const coloney = new Fish(\n                new Vector2D(\n                    0,\n                    0\n                ),\n                c\n            );\n\n            const b = new TargetTrackingController(\n                coloney,\n            );\n            boid.addBoid(\n                b\n            );\n        }\n    }\n\n    scene.begin();\n\n    window.addEventListener(\"pointerdown\", (e: MouseEvent) => {\n        scene.press({\n            key: \"mouse\",\n            position: {\n                x: e.clientX,\n                y: e.clientY\n            }\n        });\n    });\n}\n\nexport default () => {\n    const [size, setSize] = React.useState({ width: 0, height: 0 });\n\n    React.useEffect(() => {\n        setSize({ width: window.innerWidth, height: window.innerHeight });\n    }, [])\n\n    return (\n        <div style={{ height: \"100vh\", width: \"100vw\" }}>\n            <Coloney width={size.width + \"px\"} height={size.height + \"px\"}\n                resized={s => {\n                    if (scene) {\n                        scene.width = s.width;\n                        scene.height = s.height;\n                    }\n                }}\n                initialized={init}\n            />\n        </div>\n    );\n};\n"],"sourceRoot":""}