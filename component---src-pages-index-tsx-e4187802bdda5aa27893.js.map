{"version":3,"sources":["webpack://colony-demo/./src/components/Colony.tsx","webpack://colony-demo/../src/lib/core/Scene.ts","webpack://colony-demo/../src/lib/core/Numerics.ts","webpack://colony-demo/../src/lib/utils/animationFrame.ts","webpack://colony-demo/../src/lib/Renderer.ts","webpack://colony-demo/../src/lib/core/Vector2D.ts","webpack://colony-demo/../src/lib/core/Color.ts","webpack://colony-demo/../src/lib/core/Random.ts","webpack://colony-demo/../src/lib/core/Actor.ts","webpack://colony-demo/../src/lib/Food.ts","webpack://colony-demo/../src/lib/SwayFallingController.ts","webpack://colony-demo/../src/lib/FoodProvider.ts","webpack://colony-demo/../src/lib/TargetTrackingController.ts","webpack://colony-demo/../src/lib/BoidController.ts","webpack://colony-demo/../src/lib/Fish.ts","webpack://colony-demo/../src/lib/JellyFish.ts","webpack://colony-demo/./src/pages/index.tsx"],"names":["scale","window","devicePixelRatio","Coloney","props","canvasRef","useRef","useState","width","height","size","setSize","isInitialized","resize","canvasEl","current","rect","getBoundingClientRect","resized","useEffect","Error","getContext","initialized","addEventListener","removeEventListener","ref","style","Scene","renderer","subscription","end","_actors","this","append","actor","push","setup","remove","actors","filter","x","begin","callback","time","id","tick","bind","Date","now","loop","requestAnimationFrame","cancelAnimationFrame","deltaTime","clear","a","update","isDestroyed","press","e","pressed","Renderer","context","y","fillStyle","clearRect","drawCircle","r","color","rgba","beginPath","arc","Math","PI","closePath","fill","drawStrokeCircle","lineWidth","strokeStyle","stroke","drawLine","x1","y1","x2","y2","lineTo","pushMatrix","save","popMatrix","restore","translate","closePathFill","closePathStroke","rotate","angle","moveTo","Vector2D","PI_TIMES_TWO","lerp","b","lerpFactor","vector","radian","cos","sin","result","diff","p1","p2","sqrt","pow","distance","Numerics","Color","g","_r","_g","_b","_a","hex","toHexString","fromHsv","hue","saturation","lightness","C","abs","H","X","R","G","B","floor","m","round","fromColorCode","code","alpha","length","parseInt","slice","toString","colors","next","n1","n2","random","Random","Actor","tags","destroy","Food","location","isDie","nextDouble","paintColor","scene","SweyFallingController","c","waveOffcet","speed","waveWidth","colony","FoodProvider","foods","food","console","log","position","TargetTrackingController","smoothCurveRate","speedBias","autoTarget","endForceTrack","shockAvoidDistance","shockThreshouldDistance","isShowEnabled","isFoodEnabled","foodProvider","getRandomColor","debug","p","find","shock","checkFoodAction","targetLocation","noisev","angleDiff","atan2","lerpAngle","dist","normalize","vx","vy","undefined","initTargetLocation","translateTargetLocation","isForceTracking","inputlocation","lastSpeed","vec","i","BoidController","boss","boids","thresholdDist","r1","r2","r3","setSpeed","addBoid","controller","item","drawAsBoid","movement","getMovementVector","getVectorToCenter","getVectorToAvoid","getVectorToAverage","count","Fish","segmentlocation","Array","segLength","finAngle","finDirection","lightSegmentIndex","isFlicking","isFlicking_","beginBrightness","drawSegment","xin","yin","dx","dy","toRadians","Jellyfish","capPointAngle","capPointAngleBase","capPointAngleBaseSpd","col","headFillPaintColor","headSize","headWitherPower","draw","CAP_JOINT_COUNT","drawFillHead","drawHeadFrame","tx","ty","j","deg","stack","unshift","stackPoint","init","s","boid","coloney","key","clientX","clientY","React","innerWidth","innerHeight"],"mappings":"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","file":"component---src-pages-index-tsx-e4187802bdda5aa27893.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\n\r\ntype Size = { width: number, height: number };\r\n\r\ninterface ColoneyProps {\r\n    width: string;\r\n    height: string;\r\n    resized: (size: Size) => void;\r\n    initialized: (context: CanvasRenderingContext2D, size: Size) => void;\r\n}\r\n\r\nconst scale = () => typeof window !== \"undefined\" ? window.devicePixelRatio : 1;\r\n\r\nexport const Coloney = (props: ColoneyProps) => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    const [size, setSize] = useState({\r\n        width: 0,\r\n        height: 0,\r\n    });\r\n    const isInitialized = useRef(false);\r\n\r\n    const resize = () => {\r\n        const canvasEl = canvasRef.current;\r\n        if (canvasEl) {\r\n            const rect = canvasEl.getBoundingClientRect();\r\n            setSize({\r\n                width: rect.width,\r\n                height: rect.height\r\n            });\r\n            props.resized({\r\n                width: rect.width,\r\n                height: rect.height\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isInitialized.current || size.width === 0) {\r\n            return;\r\n        }\r\n\r\n        isInitialized.current = true;\r\n        const canvasEl = canvasRef.current;\r\n        if (canvasEl) {\r\n            const ctx = canvasEl.getContext(\"2d\");\r\n            ctx.scale(scale(), scale());\r\n            props.initialized(canvasEl.getContext(\"2d\"), size);\r\n        }\r\n        else {\r\n            throw new Error(\"The canvas element couldn't initialized.\");\r\n        }\r\n    }, [size]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", resize);\r\n        return () => window.removeEventListener(\"resize\", resize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        resize();\r\n    }, [props.width, props.height]);\r\n\r\n    return <canvas\r\n        ref={canvasRef}\r\n        width={size.width * scale()}\r\n        height={size.height * scale()}\r\n        style={{\r\n            width: props.width,\r\n            height: props.height,\r\n        }}\r\n    />;\r\n}","import { Actor } from \"../core/Actor\";\r\nimport { IRenderer } from \"../IRenderer\";\r\nimport { animationFrame } from \"../utils/animationFrame\";\r\nimport { MousePressedEvent } from \"./MouseEvent\";\r\n\r\ntype Subscription = ReturnType<typeof animationFrame>;\r\n\r\nexport class Scene {\r\n    subscription: Subscription = { end: () => { } };\r\n    height = 0;\r\n    width = 0;\r\n    _actors: Actor[] = [];\r\n\r\n    get actors() {\r\n        return this._actors;\r\n    }\r\n\r\n    constructor(width: number, height: number, readonly renderer: IRenderer) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    append(actor: Actor) {\r\n        this._actors.push(actor);\r\n        actor.setup(this);\r\n    }\r\n\r\n    remove(actor: Actor) {\r\n        this._actors = this.actors.filter(x => x !== actor);\r\n    }\r\n\r\n    begin() {\r\n        this.end();\r\n        this.subscription = animationFrame(this.tick.bind(this));\r\n        for (const a of this.actors) {\r\n            a.setup(this);\r\n        }\r\n    }\r\n\r\n    end() {\r\n        this.subscription.end();\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        this.renderer.clear(0, 0, this.width, this.height);\r\n\r\n        const actors = this._actors;\r\n        for (const a of actors) {\r\n            a.update(deltaTime, this);\r\n\r\n            if (a.isDestroyed) {\r\n                this._actors = this.actors.filter(x => x !== a);\r\n            }\r\n        }\r\n    }\r\n\r\n    press(e: MousePressedEvent) {\r\n        for (const controller of this.actors) {\r\n            controller.pressed(e);\r\n        }\r\n    }\r\n}","import { Vector2D } from \"./Vector2D\";\r\n\r\nexport namespace Numerics {\r\n    export const PI2 = 3.14159265359;\r\n    export const PI_TIMES_TWO2 = 6.28318530718;\r\n    export const PI = 3.14159265359;\r\n    export const PI_TIMES_TWO = 6.28318530718;\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function lerp(a: number, b: number, lerpFactor: number): number {\r\n        const result = ((1.0 - lerpFactor) * a) + (lerpFactor * b);\r\n        return result;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function rotate(vector: Vector2D, radian: number): Vector2D {\r\n        return new Vector2D(\r\n            vector.x * Math.cos(radian) - vector.y * Math.sin(radian),\r\n            vector.x * Math.sin(radian) + vector.y * Math.cos(radian)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function lerpAngle(a: number, b: number, lerpFactor: number): number {\r\n        let result = 0;\r\n        const diff = b - a;\r\n\r\n        if (diff < -PI) {\r\n            // lerp upwards past PI_TIMES_TWO\r\n            b += PI_TIMES_TWO;\r\n\r\n            result = lerp(a, b, lerpFactor);\r\n\r\n            if (result >= PI_TIMES_TWO) {\r\n                result -= PI_TIMES_TWO;\r\n            }\r\n        }\r\n\r\n        else if (diff > PI) {\r\n            // lerp downwards past 0\r\n            b -= PI_TIMES_TWO;\r\n\r\n            result = lerp(a, b, lerpFactor);\r\n\r\n            if (result < 0) {\r\n                result += PI_TIMES_TWO;\r\n            }\r\n        }\r\n\r\n        else {\r\n            // straight lerp\r\n            result = lerp(a, b, lerpFactor);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function toRadians(angle: number) {\r\n        return (PI / 180) * angle;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function toAngle(radian: number) {\r\n        return radian * 180 / PI;\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function dist(p1: Vector2D, p2: Vector2D) {\r\n        return Math.sqrt(Math.pow((p2.x - p1.x), 2) + Math.pow((p2.y - p1.y), 2));\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function normalize(a: Vector2D) {\r\n        const distance = Math.sqrt(a.x * a.x + a.y * a.y);\r\n        if (distance === 0) {\r\n            return new Vector2D(0, 0);\r\n        }\r\n\r\n        return new Vector2D(a.x / distance, a.y / distance);\r\n    }\r\n}\r\n","\r\nexport const animationFrame = (callback: (deltaTime: number) => void) => {\r\n    let time = Date.now();\r\n    let id = 0;\r\n    let loop = () => {\r\n        callback((Date.now() - time) * 0.001);\r\n        id = requestAnimationFrame(loop);\r\n        time = Date.now();\r\n    }\r\n    loop();\r\n    return {\r\n        end: () => cancelAnimationFrame(id)\r\n    };\r\n}\r\n","import { IRenderer } from \"./IRenderer\";\r\nimport { Color } from \"./core/Color\";\r\nimport { Vector2D } from \"./core/Vector2D\";\r\n\r\nexport class Renderer implements IRenderer {\r\n    private context: CanvasRenderingContext2D;\r\n\r\n    constructor(context: CanvasRenderingContext2D) {\r\n        this.context = context;\r\n    }\r\n\r\n    clear(x: number, y: number, width: number, height: number): void {\r\n        const context = this.context;\r\n        context.fillStyle = \"rgba(0,0,0,0)\"\r\n        context.clearRect(x, y, width, height);\r\n    }\r\n\r\n    public drawCircle(x: number, y: number, r: number, color: Color): void {\r\n        const context = this.context;\r\n        context.fillStyle = color.rgba;\r\n        context.beginPath();\r\n        context.arc(x, y, r, 0, 2 * Math.PI);\r\n        context.closePath();\r\n        context.fill();\r\n    }\r\n\r\n    public drawStrokeCircle(x: number, y: number, r: number, lineWidth: number, color: Color): void {\r\n        const context = this.context;\r\n        context.strokeStyle = color.rgba;\r\n        context.beginPath();\r\n        context.arc(x, y, r, 0, 2 * Math.PI);\r\n        context.closePath();\r\n        context.stroke();\r\n    }\r\n\r\n    public drawLine(x1: number, y1: number, x2: number, y2: number, width: number, color: Color) {\r\n        const context = this.context;\r\n        context.strokeStyle = color.rgba;\r\n        context.beginPath();\r\n        context.lineTo(x1, y1);\r\n        context.lineTo(x2, y2);\r\n        context.closePath();\r\n        context.stroke();\r\n    }\r\n\r\n    public pushMatrix() {\r\n        this.context.save();\r\n    }\r\n\r\n    public popMatrix() {\r\n        this.context.restore();\r\n    }\r\n\r\n    public translate(x: number, y: number) {\r\n        this.context.translate(x, y);\r\n    }\r\n\r\n    public beginPath() {\r\n        this.context.beginPath();\r\n    }\r\n\r\n    public closePathFill(color: Color) {\r\n        this.context.closePath();\r\n        this.context.fillStyle = color.rgba;\r\n        this.context.fill();\r\n    }\r\n\r\n    public closePathStroke(color: Color) {\r\n        this.context.closePath();\r\n        this.context.strokeStyle = color.rgba;\r\n        this.context.stroke();\r\n    }\r\n\r\n    public rotate(angle: number) {\r\n        this.context.rotate(angle);\r\n    }\r\n\r\n    public lineTo(x: number, y: number) {\r\n        this.context.lineTo(x, y);\r\n    }\r\n\r\n    public moveTo(x: number, y: number) {\r\n        this.context.lineTo(x, y);\r\n    }\r\n}\r\n","/**\r\n * 2次元ベクトルを表します.\r\n */\r\nexport class Vector2D {\r\n    public x: number;\r\n    public y: number;\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n","\r\n/**\r\n * @summary 様々な色空間の色を表現するクラス\r\n */\r\nexport class Color {\r\n    // #region private fields\r\n    private _r = 0;\r\n    private _g = 0;\r\n    private _b = 0;\r\n    private _a = 1;\r\n    public hex = \"#000000\";\r\n    // #endregion\r\n\r\n    // #region gettres\r\n    /**\r\n    * RGBAのうちRの値（0~255）\r\n    */\r\n    get r(): number {\r\n        return this._r;\r\n    }\r\n\r\n    /**\r\n    * RGBAのうちGの値（0~255）\r\n    */\r\n    get g(): number {\r\n        return this._g;\r\n    }\r\n\r\n    /**\r\n    * RGBAのうちBの値（0~255）\r\n    */\r\n    get b(): number {\r\n        return this._b;\r\n    }\r\n\r\n    /**\r\n     * RGBAのうちAの値（0~255）\r\n     */\r\n    get a(): number {\r\n        return this._a;\r\n    }\r\n\r\n    /**\r\n     * cssの文字列\r\n     */\r\n    get rgba(): string {\r\n        return `rgba(${this._r},${this._g},${this._b},${this._a})`;\r\n    }\r\n    // #endregon\r\n\r\n    // #region public methods\r\n    // constructor(hex: string, alpha?: number)\r\n    // constructor(hsv: number[], alpha?: number);\r\n    // constructor(r: number, g: number, b: number);\r\n    // constructor(r: number, g: number, b: number, a: number);\r\n    constructor(r: any, g: number, b: number, a: number) {\r\n        // if (r instanceof Array)\r\n        // {\r\n\r\n        // }\r\n        // else if (typeof (r) === \"string\")\r\n        // {\r\n        //     if (r.length !== 7)\r\n        //     {\r\n        //         throw new Error(\"不正なカラーコードです。\");\r\n        //     }\r\n        //     this._r = parseInt(r.slice(1, 3), 16) & 255;\r\n        //     this._g = parseInt(r.slice(3, 5), 16) & 255;\r\n        //     this._b = parseInt(r.slice(5, 7), 16) & 255;\r\n        //     this._a = g || 1;\r\n        // }\r\n        // else if (g && b)\r\n        // {\r\n        //     this._r = r;\r\n        //     this._g = g;\r\n        //     this._b = b;\r\n        //     this._a = a || 1;\r\n        // }\r\n\r\n        this._r = r;\r\n        this._g = g;\r\n        this._b = b;\r\n        this._a = a || 1;\r\n        this.hex = this.toHexString();\r\n    }\r\n\r\n    public static fromHsv(hue: number, saturation: number, lightness: number, a = 1): Color {\r\n        const C = (1 - Math.abs(2 * lightness - 1)) * saturation;\r\n        const H = (hue / 60) % 6;\r\n        const X = C * (1 - Math.abs(H % 2 - 1));\r\n\r\n        let R = 0;\r\n        let G = 0;\r\n        let B = 0;\r\n        switch (Math.floor(H)) {\r\n            case 0: R = C; G = X; B = 0; break;\r\n            case 1: R = X; G = C; B = 0; break;\r\n            case 2: R = 0; G = C; B = X; break;\r\n            case 3: R = 0; G = X; B = C; break;\r\n            case 4: R = X; G = 0; B = C; break;\r\n            case 5: R = C; G = 0; B = X; break;\r\n        }\r\n\r\n        const m = lightness - 0.5 * C;\r\n\r\n        return new Color(\r\n            Math.round((R + m) * 255),\r\n            Math.round((G + m) * 255),\r\n            Math.round((B + m) * 255),\r\n            a\r\n        );\r\n    }\r\n\r\n    public static fromColorCode(code: string, alpha = 1) {\r\n        if (code.length !== 7) {\r\n            throw new Error(\"不正なカラーコードです。\");\r\n        }\r\n        return new Color(parseInt(code.slice(1, 3), 16) & 255,\r\n            parseInt(code.slice(3, 5), 16) & 255,\r\n            parseInt(code.slice(5, 7), 16) & 255,\r\n            alpha || 1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 16進数文字列へ変換\r\n     */\r\n    public toHexString() {\r\n        return `#${this._r.toString(16)}${this._g.toString(16)}${this._b.toString(16)}`;\r\n    }\r\n    // #endregion\r\n}\r\n","import { Color } from \"./Color\";\r\n\r\nconst colors = [\r\n    \"#3f51b5\",\r\n    \"#2196f3\",\r\n    \"#00bcd4\",\r\n    \"#009688\",\r\n    \"#4caf50\",\r\n    \"#cddc39\",\r\n    \"#ffeb3b\",\r\n    \"#ffc107\",\r\n    \"#ff9800\",\r\n    \"#ff5722\",\r\n    \"#f44336\",\r\n    \"#e91e63\",\r\n    \"#9c27b0\"\r\n];\r\n\r\n/**\r\n * @summary 乱数生成を提供します.\r\n */\r\nexport namespace Random\r\n{\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function next(n1 = 0, n2?: number): number {\r\n        if (!n2) {\r\n            return Math.floor(Math.random() * (n1 + 1));\r\n        }\r\n        if (n2) {\r\n            return Math.floor(Math.random() * (n2 + 1 - n1)) + n1;\r\n        }\r\n        return Math.floor(Math.random() * 1000);\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function nextDouble(): number {\r\n        return Math.random();\r\n    }\r\n\r\n    // eslint-disable-next-line no-inner-declarations\r\n    export function getRandomColor(): Color {\r\n        return Color.fromColorCode(colors[next(colors.length - 1)]);\r\n    }\r\n}\r\n","import { Vector2D } from \"./Vector2D\";\r\nimport { Scene } from \"./Scene\";\r\nimport { MousePressedEvent } from \"./MouseEvent\";\r\n\r\nexport abstract class Actor {\r\n    tags: string[] = [];\r\n    abstract setup(scene: Scene): void;\r\n    abstract update(deltaTime: number, scene: Scene): void;\r\n    abstract pressed(e: MousePressedEvent): void;\r\n\r\n    public isDestroyed = false;\r\n\r\n    destroy() {\r\n        this.isDestroyed = true;\r\n    }\r\n}","import { Vector2D } from \"./core/Vector2D\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Color } from \"./core/Color\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { Scene } from \"./core/Scene\";\r\n\r\n/// <summary>\r\n///\r\n/// </summary>\r\nexport class Food implements IColony {\r\n    public location: Vector2D;\r\n    public size: number;\r\n\r\n    paintColor: Color;\r\n\r\n    isDie = false;\r\n\r\n    /// <summary>\r\n    ///\r\n    /// </summary>\r\n    public constructor(location: Vector2D) {\r\n        this.location = location;\r\n        this.size = 2 + Random.nextDouble();\r\n        this.paintColor = new Color(60, 60 + Random.next(60), 128 + Random.next(127), 255);\r\n    }\r\n\r\n    vector: Vector2D = { x: 0, y: 0 };\r\n\r\n    update(scene: Scene): void {\r\n        const renderer = scene.renderer;\r\n\r\n        renderer.drawCircle(this.location.x, this.location.y, this.size, this.paintColor);\r\n\r\n        // paint.Color = new Color(155, 221, 48);\r\n        // canvas.DrawCircle(x, y, 12, paint);\r\n        // paint.Color = new Color(40, 60, 58);\r\n        // canvas.DrawCircle(x, y, 8, paint);\r\n        // paint.Color = new Color(155, 180, 120);\r\n        // canvas.DrawCircle(x, y, 4, paint);\r\n    }\r\n\r\n    translate(vector: Vector2D): void {\r\n        this.location.x += vector.x;\r\n        this.location.y += vector.y;\r\n    }\r\n\r\n    rotate(angle: number): void {\r\n    }\r\n}\r\n","import { Vector2D } from \"./core/Vector2D\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { IController } from \"./IController\";\r\nimport { Scene } from \"./core/Scene\";\r\n\r\nexport class SweyFallingController<T extends IColony> implements IController {\r\n    colony: T;\r\n    private waveOffcet = 0;\r\n    isDie = false;\r\n\r\n    speed = 80;\r\n    waveWidth = 60;\r\n\r\n    constructor(c: T) {\r\n        this.colony = c;\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        this.waveOffcet += 0.1;\r\n\r\n        const y = this.colony.location.y;\r\n        this.colony.translate({\r\n            x: Math.sin(this.waveOffcet) * this.waveWidth * deltaTime,\r\n            y: this.speed * deltaTime\r\n        });\r\n\r\n        if (y >= scene.height) {\r\n            this.isDie = true;\r\n        }\r\n\r\n        this.colony.update(scene);\r\n    }\r\n}","import { Actor } from \"./core/Actor\";\r\nimport { MousePressedEvent } from \"./core/MouseEvent\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { Food } from \"./Food\";\r\nimport { IController } from \"./IController\";\r\nimport { SweyFallingController } from \"./SwayFallingController\";\r\n\r\nexport class FoodProvider extends Actor {\r\n    foods: SweyFallingController<Food>[] = [];\r\n\r\n    setup(scene: Scene): void {\r\n\r\n    }\r\n\r\n    update(deltaTime: number, scene: Scene): void {\r\n        for (const food of this.foods) {\r\n            food.update(deltaTime, scene);\r\n\r\n            if (food.isDie) {\r\n                this.remove(food.colony);\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(food: Food) {\r\n        this.foods = this.foods.filter(x => x.colony !== food);\r\n        console.log(this);\r\n    }\r\n\r\n    pressed(e: MousePressedEvent): void {\r\n        this.foods.push(\r\n            new SweyFallingController(\r\n                new Food({ x: e.position.x, y: 0 })\r\n            )\r\n        );\r\n    }\r\n}","import { Vector2D } from \"./core/Vector2D\";\r\nimport { Food } from \"./Food\";\r\nimport { IController } from \"./IController\";\r\nimport { Random } from \"./core/Random\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { IRenderer } from \"./IRenderer\";\r\nimport { Color } from \"./core/Color\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { Actor } from \"./core/Actor\";\r\nimport { MousePressedEvent } from \"./core/MouseEvent\";\r\nimport { FoodProvider } from \"./FoodProvider\";\r\n\r\nexport class TargetTrackingControllerOption {\r\n    public speedBias = 1;\r\n}\r\n\r\n/// <summary>\r\n///\r\n/// </summary>\r\nexport class TargetTrackingController<T extends IColony> extends Actor implements IController<T> {\r\n    colony: T;\r\n\r\n    /// <summary>\r\n    /// スピード\r\n    /// </summary>\r\n    public speed = 1.0;\r\n\r\n    speedBias = 2;\r\n\r\n    /// <summary>\r\n    /// プリミティブの向いている方向\r\n    /// </summary>\r\n    protected angle = 0;\r\n\r\n    /// <summary>\r\n    /// プリミティブの目標地点の座標\r\n    /// </summary>\r\n    targetLocation?: Vector2D;\r\n\r\n    /// <summary>\r\n    /// トラッキングしている餌\r\n    /// </summary>\r\n    food: Food | null = null;\r\n\r\n    smoothCurveRate: number;\r\n\r\n    autoTarget = true;\r\n\r\n    endForceTrack: null | (() => void) = null;\r\n\r\n    shockAvoidDistance = 200;\r\n    shockThreshouldDistance = 120;\r\n\r\n    isShowEnabled = true;\r\n    isFoodEnabled = true;\r\n\r\n    foodProvider: FoodProvider | null = null;\r\n\r\n    get isForceTracking() {\r\n        return !!this.endForceTrack;\r\n    }\r\n\r\n    /// <summary>\r\n    /// コンストラクタ\r\n    /// </summary>\r\n    /// <param name=\"foods\"></param>\r\n    public constructor(\r\n        colony: T,\r\n        speed = 100,\r\n        smoothCurveRate = 0.05\r\n    ) {\r\n        super();\r\n\r\n        this.colony = colony;\r\n        this.speedBias = speed;\r\n        this.smoothCurveRate = smoothCurveRate;\r\n        // colony.IsFlicking = false;\r\n    }\r\n\r\n    setup(scene: Scene): void {\r\n        const p = scene.actors.find(x => x instanceof FoodProvider);\r\n        if (p) {\r\n            this.foodProvider = p as FoodProvider;\r\n        }\r\n    }\r\n\r\n    pressed(e: MousePressedEvent): void {\r\n        this.shock(e.position);\r\n    }\r\n\r\n    c = Random.getRandomColor();\r\n\r\n    debug = false;\r\n\r\n    public update(deltaTime: number, scene: Scene) {\r\n        const location = this.colony.location;\r\n\r\n        // 捕食できる餌がないかチェックしあればトラッキング\r\n        this.checkFoodAction(scene);\r\n\r\n        // 目的地が設定されていなければ目的地を初期化\r\n        if (!this.targetLocation && this.autoTarget) {\r\n            this.initTargetLocation(\r\n                new Vector2D(\r\n                    Random.next(scene.width),\r\n                    Random.next(scene.height)));\r\n            return;\r\n        }\r\n\r\n        if (!this.targetLocation) {\r\n            return;\r\n        }\r\n\r\n        this.debug && scene.renderer.drawCircle(this.targetLocation!.x, this.targetLocation!.y, 20, new Color(255, 255, 0, 0))\r\n        if (this.autoTarget) {\r\n            let x = this.targetLocation.x - location.x;\r\n            let y = this.targetLocation.y - location.y;\r\n\r\n            const noisev = () => Math.random() * 0.008 * this.speed;\r\n\r\n            const angleDiff = Math.atan2(y, x);\r\n            this.angle = Numerics.lerpAngle(this.angle, angleDiff, this.smoothCurveRate);\r\n\r\n            // 線形補間した角度をベクトル変換し足すことで、滑らかに大まわりに回転させる\r\n            if (Numerics.dist(this.targetLocation, location) > 100) {\r\n                x = Math.cos(this.angle);\r\n                y = Math.sin(this.angle);\r\n            }\r\n\r\n            // 正規化してスピードとデルタタイムを合わせる\r\n            const vector = Numerics.normalize(new Vector2D(x, y));\r\n            const vx = vector.x * this.speed * deltaTime;\r\n            const vy = vector.y * this.speed * deltaTime;\r\n\r\n            this.colony.translate(new Vector2D(vx + noisev(), vy + noisev()));\r\n            this.colony.rotate(this.angle);\r\n            this.colony.update(scene);\r\n        }\r\n        else {\r\n            const x = (this.targetLocation.x - location.x) * 0.1;\r\n            const y = (this.targetLocation.y - location.y) * 0.1;\r\n            const vx = x * this.speed * deltaTime;\r\n            const vy = y * this.speed * deltaTime;\r\n            this.colony.translate(new Vector2D(vx, vy));\r\n            this.colony.update(scene);\r\n        }\r\n\r\n        // 次回のフレームで初期化させるため\r\n        if (Numerics.dist(this.colony.location, this.targetLocation) <= 20.0) {\r\n            this.endForceTrack && this.endForceTrack();\r\n\r\n            if (this.autoTarget)\r\n                this.targetLocation = undefined;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 目的地を初期化します。\r\n    /// </summary>\r\n    public initTargetLocation(location: Vector2D) {\r\n        this.targetLocation = location;\r\n        this.speed = this.speedBias * (1.0 + Random.nextDouble());\r\n        console.log(this.speed, this.speedBias, Random.nextDouble())\r\n    }\r\n\r\n    public translateTargetLocation(location: Vector2D, speed?: number) {\r\n        if (this.isForceTracking) {\r\n            return;\r\n        }\r\n\r\n        if (speed) this.speed = speed;\r\n\r\n        if (!this.targetLocation)\r\n            this.targetLocation = ({\r\n                x: location.x,\r\n                y: location.y\r\n            });\r\n        else\r\n            this.targetLocation = ({\r\n                x: this.targetLocation.x + location.x,\r\n                y: this.targetLocation.y + location.y\r\n            });\r\n    }\r\n\r\n    /// <summary>\r\n    /// プリミティブにショックを与える。（入力したところから遠ざける）\r\n    /// </summary>\r\n    /// <param name=\"inputlocation\">入力のあった座標</param>\r\n    public shock(inputlocation: Vector2D) {\r\n        const location = this.colony.location;\r\n\r\n        if (Numerics.dist(inputlocation, location) <= this.shockThreshouldDistance) {\r\n            // 入力の座標とプリミティブの座標のベクトルの逆の地点を目的地へ設定\r\n            // 速度も上げる\r\n            const lastSpeed = this.speed;\r\n            this.speed = this.speedBias * 5;\r\n            let x = inputlocation.x - location.x;\r\n            let y = inputlocation.y - location.y;\r\n\r\n            // 距離が現在地から300fになるよう正規化\r\n            const vec = Numerics.normalize(new Vector2D(x, y));\r\n            x = location.x - vec.x * this.shockAvoidDistance;\r\n            y = location.y - vec.y * this.shockAvoidDistance;\r\n            this.targetLocation = new Vector2D(x, y);\r\n\r\n            this.endForceTrack = () => {\r\n                this.speed = lastSpeed;\r\n                this.endForceTrack = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// エサを目的地に設定し、捕食させる。\r\n    /// </summary>\r\n    public checkFoodAction(scene: Scene) {\r\n        if (!this.foodProvider) {\r\n            return;\r\n        }\r\n\r\n        const foods = this.foodProvider.foods;\r\n        // 餌の処理\r\n        if (foods.length > 0) {\r\n            // 一番近い餌を格納\r\n            this.food = foods[0]?.colony ?? null;\r\n            if (!this.food) {\r\n                return;\r\n            }\r\n\r\n            for (let i = 1; i < foods.length; i++) {\r\n                if (Numerics.dist(this.colony.location, foods[i].colony.location) < Numerics.dist(this.colony.location, this.food.location)) {\r\n                    this.food = foods[i].colony;\r\n                }\r\n            }\r\n\r\n            // 距離が300以下なら目的地へ\r\n            if (Numerics.dist(this.colony.location, this.food.location) <= 300) {\r\n                this.targetLocation = this.food.location;\r\n                const lastSpeed = this.speed;\r\n                this.speed = this.speedBias * 2;\r\n\r\n                this.endForceTrack = () => {\r\n                    this.speed = lastSpeed;\r\n                    this.endForceTrack = null;\r\n                }\r\n            }\r\n            if (Numerics.dist(this.colony.location, this.food.location) <= 10.0 && this.food) {\r\n                this.foodProvider.remove(this.food);\r\n            }\r\n            else {\r\n                this.food = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { IColony } from \"./IColoney\";\r\nimport { IController } from \"./IController\";\r\nimport { Vector2D } from \"./core/Vector2D\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { TargetTrackingController } from \"./TargetTrackingController\";\r\n\r\n/// <summary>\r\n/// コントローラーを群れとして表現します。\r\n/// </summary>\r\n/// <typeparam name=\"T\"></typeparam>\r\nexport class BoidController extends TargetTrackingController<IColony> implements IController {\r\n    /// <summary>\r\n    /// 群れに属する図形のリスト\r\n    /// </summary>\r\n    public readonly boids: TargetTrackingController<IColony>[] = [];\r\n\r\n    /// <summary>\r\n    /// ボスとなる図形\r\n    /// </summary>\r\n    public get boss() {\r\n        return this.colony;\r\n    }\r\n\r\n    thresholdDist = 30;\r\n\r\n    readonly r1 = 0.05; // パラメータ：群れの中心に向かう度合\r\n    readonly r2 = 0.1; // パラメータ：仲間を避ける度合\r\n    readonly r3 = 0.025; // パラメータ：群れの平均速度に合わせる度合\r\n\r\n    angle = 0;\r\n\r\n    /// <summary>\r\n    /// コンストラクタ1\r\n    /// </summary>1\r\n    /// <param name=\"controller\"></param>\r\n    public constructor(boss: IColony) {\r\n        super(boss);\r\n    }\r\n\r\n    setSpeed(speed: number) {\r\n        this.speedBias = speed;\r\n    }\r\n\r\n\r\n    setup(scene: Scene): void {\r\n        super.setup(scene);\r\n        for (const item of this.boids) {\r\n            item.setup(scene);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// 群れとして表現するコントローラーを追加します。\r\n    /// </summary>\r\n    /// <param name=\"colony\"></param>\r\n    public addBoid(controller: TargetTrackingController<IColony>) {\r\n        this.boids.push(controller);\r\n        controller.autoTarget = false;\r\n        controller.shockAvoidDistance = 8;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 描画処理\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画するキャンバス</param>\r\n    /// <param name=\"deltaTime\">直前の描画にかかった時間</param>\r\n    public update(deltaTime: number, scene: Scene) {\r\n        // const movement = this.getMovementVector(this.boss);\r\n        // this.boss.translate(movement);\r\n        super.update(deltaTime, scene);\r\n\r\n\r\n        for (const item of this.boids) {\r\n            // item.checkFoodAction();\r\n\r\n            // if (!item.targetLocation) {\r\n            this.drawAsBoid(item, deltaTime, scene);\r\n            //  }\r\n        }\r\n\r\n        // DEBUG\r\n        // this.targetLocation && scene.renderer.drawCircle(this.targetLocation!.x, this.targetLocation.y, 20, new Color(255, 0, 0, 0))\r\n    }\r\n\r\n    private drawAsBoid(controller: TargetTrackingController<IColony>, deltaTime: number, scene: Scene) {\r\n        const movement = this.getMovementVector(controller.colony);\r\n\r\n        const speed = Numerics.dist(controller.targetLocation || new Vector2D(0, 0), movement);\r\n        controller.translateTargetLocation(movement, speed);\r\n        controller.update(deltaTime, scene);\r\n    }\r\n\r\n    getMovementVector(colony: IColony): Vector2D {\r\n        let vx = 0;\r\n        let vy = 0;\r\n\r\n        let result = this.getVectorToCenter(colony);\r\n        vx += result.x * this.r1 * this.speed;\r\n        vy += result.y * this.r1 * this.speed;\r\n\r\n        result = this.getVectorToAvoid(colony);\r\n        vx += result.x * this.r2 * this.speed;\r\n        vy += result.y * this.r2 * this.speed;\r\n\r\n        result = this.getVectorToAverage(colony);\r\n        vx += result.x * this.r3 * this.speed;\r\n        vy += result.y * this.r3 * this.speed;\r\n\r\n        vx /= 3;\r\n        vy /= 3;\r\n\r\n        return {\r\n            x: Numerics.lerp(colony.vector.x, vx, 0.05),\r\n            y: Numerics.lerp(colony.vector.y, vy, 0.05)\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    ///\r\n    /// </summary>\r\n    private getVectorToCenter(colony: IColony): Vector2D {\r\n        let vx = 0; let vy = 0;\r\n        const x = colony.location.x;\r\n        const y = colony.location.y;\r\n\r\n        for (const item of this.boids) {\r\n            // 参照が同じであればcontinue\r\n            if (item.colony === colony) {\r\n                continue;\r\n            }\r\n            const location = item.colony.location;\r\n            vx += location.x;\r\n            vy += location.y;\r\n        }\r\n\r\n        const count = this.boids.length - 1;\r\n        vx /= count;\r\n        vy /= count;\r\n\r\n        vx += this.boss.location.x;\r\n        vy += this.boss.location.y;\r\n        vx /= 2;\r\n        vy /= 2;\r\n\r\n        return Numerics.normalize(new Vector2D(vx - x, vy - y));\r\n    }\r\n\r\n    /// <summary>\r\n    ///\r\n    /// </summary>\r\n    private getVectorToAvoid(colony: IColony): Vector2D {\r\n        let vx = 0; let vy = 0;\r\n        for (const item of this.boids) {\r\n            // 参照が同じであればcontinue\r\n            if (item.colony === colony) {\r\n                continue;\r\n            }\r\n\r\n            const location = item.colony.location;\r\n            if (Numerics.dist(location, colony.location) < this.thresholdDist) {\r\n                vx -= (location.x - colony.location.x);\r\n                vy -= (location.y - colony.location.y);\r\n            }\r\n        }\r\n\r\n        if (Numerics.dist(this.boss.location, colony.location) < this.thresholdDist) {\r\n            vx -= this.boss.location.x - colony.location.x;\r\n            vy -= this.boss.location.y - colony.location.y;\r\n        }\r\n\r\n\r\n        return Numerics.normalize(new Vector2D(vx, vy));\r\n    }\r\n\r\n    /// <summary>\r\n    /// 整列\r\n    /// </summary>\r\n    private getVectorToAverage(colony: IColony): Vector2D {\r\n        let vx = 0; let vy = 0;\r\n\r\n        for (const item of this.boids) {\r\n            // 参照が同じであればcontinue\r\n            if (item.colony === colony) {\r\n                continue;\r\n            }\r\n            const vector = item.colony.vector;\r\n            vx += vector.x;\r\n            vy += vector.y;\r\n        }\r\n\r\n        vx += this.boss.vector.x;\r\n        vy += this.boss.vector.y;\r\n\r\n        // count = boids - own + boss\r\n        const count = this.boids.length;\r\n        vx /= count;\r\n        vy /= count;\r\n\r\n        return Numerics.normalize(new Vector2D(vx, vy));\r\n    }\r\n\r\n    shock(location: Vector2D) {\r\n        super.shock(location);\r\n\r\n        for (const item of this.boids) {\r\n            item.shock(location);\r\n        }\r\n    }\r\n}\r\n","import { Vector2D } from \"./core/Vector2D\";\r\nimport { Color } from \"./core/Color\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { IRenderer } from \"./IRenderer\";\r\nimport { Scene } from \"./core/Scene\";\r\nimport { IComponent } from \"./Component\";\r\n\r\n/// <summary>\r\n/// 魚を表現します。\r\n/// </summary>\r\nexport class Fish implements IColony {\r\n    /// <summary>\r\n    /// 各セグメントの座標を格納\r\n    /// </summary>\r\n    segmentlocation = Array<Vector2D>(10);\r\n\r\n    /// <summary>\r\n    /// プリミティブの座標\r\n    /// </summary>\r\n    location = new Vector2D(0, 0);\r\n\r\n    /// <summary>\r\n    /// セグメントの長さ\r\n    /// </summary>\r\n    segLength = 14.0;\r\n\r\n    /// <summary>\r\n    /// サイズ\r\n    /// </summary>\r\n    size = 0.22;\r\n\r\n    /// <summary>\r\n    /// 色の選択用\r\n    /// </summary>\r\n\r\n    /// <summary>\r\n    /// ヒレの角度\r\n    /// </summary>\r\n    finAngle = 0;\r\n\r\n    /// <summary>\r\n    /// ヒレの動きの折り返し用\r\n    /// </summary>\r\n    finDirection = 30;\r\n\r\n    /// <summary>\r\n    /// 点滅させるセグメントのインデックス\r\n    /// </summary>\r\n    lightSegmentIndex = -1;\r\n\r\n    /// <summary>\r\n    /// プリミティブのカラー\r\n    /// </summary>\r\n    color: Color;\r\n\r\n    /// <summary>\r\n    /// 点滅しているかどうか\r\n    /// </summary>\r\n    isFlicking = false;\r\n\r\n    angle = 0;\r\n\r\n    /// <summary>\r\n    /// 点滅の状態を制御\r\n    /// </summary>\r\n    public isFlicking_ = false;\r\n    //         {\r\n    //     get\r\n    //     {\r\n    //         return isFlicking;\r\n    //     }\r\n    //     set\r\n    //     {\r\n    //         if (value && !isFlicking)\r\n    //         {\r\n    //             isFlicking = true;\r\n    //             BeginBrightness();\r\n    //         }\r\n    //         else if (!value)\r\n    //         {\r\n    //             isFlicking = false;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    /// <summary>\r\n    /// コンストラクタ\r\n    /// </summary>\r\n    public constructor(\r\n        location: Vector2D = new Vector2D(0, 0),\r\n        color?: Color\r\n    ) {\r\n        this.location = location;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            this.segmentlocation[i] = new Vector2D(0, 0);\r\n        }\r\n        // paint.Color = Color.Argb(255, 140, 180, 255);\r\n        this.color = color || Random.getRandomColor();\r\n    }\r\n\r\n    public rotate(angle: number): void {\r\n        this.angle = angle;\r\n    }\r\n\r\n    private beginBrightness() {\r\n        // Task.Run(async () =>\r\n        // {\r\n        //     while (true)\r\n        //     {\r\n        //         if (!isFlicking)\r\n        //         {\r\n        //             return;\r\n        //         }\r\n        //         await Task.Delay(80);\r\n        //         lightSegmentIndex++;\r\n        //         e++;\r\n        //         // オフセット\r\n        //         if (8 < lightSegmentIndex)\r\n        //         {\r\n        //             lightSegmentIndex = 2;\r\n        //             await Task.Delay(800);\r\n        //         }\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    vector = new Vector2D(0, 0);\r\n\r\n    /// <summary>\r\n    /// 移動量（Vector）をセットします。\r\n    /// </summary>\r\n    /// <param name=\"vector\"></param>\r\n    /// <param name=\"angle\"></param>\r\n    public translate(vector: Vector2D) {\r\n        // this.location.x += vector.x;\r\n        // this.location.y += vector.y;\r\n\r\n        this.vector = vector;\r\n    }\r\n\r\n    public update(scene: Scene) {\r\n        this.location.x += this.vector.x;\r\n        this.location.y += this.vector.y;\r\n\r\n        this.drawSegment(0, this.location.x, this.location.y, scene);\r\n        for (let i = 0; i < 8; i++) {\r\n            this.drawSegment(i + 1, this.segmentlocation[i].x, this.segmentlocation[i].y, scene);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// セグメントをひとつづつ描画\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画用キャンバス</param>\r\n    /// <param name=\"i\">対象の1つ後ろのセグメントのインデックス</param>\r\n    /// <param name=\"xin\">対象のセグメントのx座標</param>\r\n    /// <param name=\"yin\">対象のセグメントのy座標</param>\r\n    private drawSegment(i: number, xin: number, yin: number, scene: Scene) {\r\n        const dx = xin - this.segmentlocation[i].x;\r\n        const dy = yin - this.segmentlocation[i].y;\r\n        const angle = Math.atan2(dy, dx);\r\n        const x = this.segmentlocation[i].x = (xin - Math.cos(angle) * this.segLength * this.size);\r\n        const y = this.segmentlocation[i].y = (yin - Math.sin(angle) * this.segLength * this.size);\r\n        const renderer = scene.renderer;\r\n\r\n        // セグメントを光らせる\r\n        if (i === this.lightSegmentIndex) {\r\n\r\n            // .paintColor = paint.Color = Config.FishColorList[e % 7];\r\n        }\r\n        else {\r\n            // paint.Color = paint.Color = color;\r\n        }\r\n\r\n        // 最初のセグメント\r\n        if (i === 1) {\r\n            // ヒレの描画\r\n            // ヒレを動かす\r\n            this.finAngle = Numerics.lerp(this.finAngle, this.finDirection, 0.04);\r\n            if (this.finAngle >= 13) {\r\n                this.finDirection = 0;\r\n            }\r\n            if (this.finAngle <= 2) {\r\n                this.finDirection = 15;\r\n            }\r\n\r\n            renderer.drawLine(\r\n                x + Math.cos(angle + Numerics.toRadians(120)) * 10 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(120)) * 10 * this.size,\r\n                x + Math.cos(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                3 * this.size,\r\n                this.color\r\n            );\r\n            renderer.drawLine(\r\n                x + Math.cos(angle + Numerics.toRadians(-120)) * 10 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(-120)) * 10 * this.size,\r\n                x + Math.cos(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                3 * this.size,\r\n                this.color\r\n            );\r\n\r\n            // ヒレ先端の点\r\n            // this.renderer.fill();\r\n\r\n            renderer.drawCircle(\r\n                x + Math.cos(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(145 + this.finAngle)) * 45 * this.size,\r\n                4 * this.size,\r\n                this.color\r\n            );\r\n            renderer.drawCircle(\r\n                x + Math.cos(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                y + Math.sin(angle + Numerics.toRadians(-145 - this.finAngle)) * 45 * this.size,\r\n                4 * this.size,\r\n                this.color\r\n            );\r\n\r\n            renderer.drawCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                (10 - i) * 1.2 * this.size,\r\n                this.color\r\n            );\r\n        }\r\n        // 奇数列\r\n        else if (i % 2 === 1) {\r\n            renderer.drawCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                1.5 * this.size,\r\n                this.color\r\n            );\r\n            renderer.drawStrokeCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                (10 - i) * 1.2 * this.size,\r\n                7,\r\n                this.color\r\n            );\r\n        }\r\n        // 偶数列\r\n        else {\r\n            renderer.drawCircle(\r\n                this.segmentlocation[i].x,\r\n                this.segmentlocation[i].y,\r\n                (10 - i) * 0.5 * this.size,\r\n                this.color);\r\n        }\r\n    }\r\n}\r\n","import { Vector2D } from \"./core/Vector2D\";\r\nimport { IController } from \"./IController\";\r\nimport { Random } from \"./core/Random\";\r\nimport { Numerics } from \"./core/Numerics\";\r\nimport { Color } from \"./core/Color\";\r\nimport { IColony } from \"./IColoney\";\r\nimport { IRenderer } from \"./IRenderer\";\r\nimport { Scene } from \"./core/Scene\";\r\n\r\nexport const CAP_JOINT_COUNT = 10; //  笠のポイントの数\r\nexport const ROUND_DEGREE = 360; //  一周の角度\r\nexport const HEAD_DETAIL = 30; //  笠の細かさ(描画する角度の閾値)\r\n\r\n/// <summary>\r\n/// 海月を表現します。\r\n/// </summary>\r\nexport class Jellyfish implements IColony {\r\n    capPointAngle = Array<number>(CAP_JOINT_COUNT); //  笠のそれぞれのポイントの広がり角度\r\n\r\n    public capPointAngleBase = 0; //  笠の動きのベース広がり角度\r\n    public capPointAngleBaseSpd = 0; //  笠の動きベースの速度\r\n    public headWitherPower: number; //  笠のしぼみ具合\r\n    public headSize: number; //  笠の大きさ\r\n\r\n    paintColor: Color;\r\n    headFillPaintColor: Color;\r\n    location: Vector2D;\r\n    angle = 0;\r\n\r\n    /// <summary>\r\n    /// コンストラクタ\r\n    /// </summary>\r\n    public constructor(location: Vector2D = new Vector2D(0, 0)) {\r\n        this.location = location;\r\n        const col = Random.getRandomColor();\r\n        this.headFillPaintColor = new Color(col.r, col.g, col.b, 0.6);\r\n\r\n        this.paintColor = new Color(col.r, col.g, col.b, 0.6);\r\n\r\n        // かさのくねくねの動きの速さを決める\r\n        this.capPointAngleBaseSpd = (0.1 + Random.nextDouble()) * 0.01;\r\n        // 笠の大きさを決める\r\n        this.headSize = 6 + (Random.next(5) + Random.nextDouble());\r\n        // 笠のしぼみ具合を決める\r\n        this.headWitherPower = 0.11;\r\n    }\r\n\r\n    update(scene: Scene): void {\r\n      this.draw(scene);\r\n    }\r\n\r\n    vector = new Vector2D(0, 0);\r\n\r\n    /**\r\n     * プリミティブを描画します。\r\n     * @param canvas 描画するキャンバス\r\n     * @param location 描画する場所\r\n     * @param angle デルタタイム\r\n     */\r\n    public draw(scene: Scene): void {\r\n        const renderer = scene.renderer;\r\n\r\n        renderer.pushMatrix();\r\n        renderer.translate(this.location.x, this.location.y);\r\n        renderer.rotate(this.angle + Numerics.toRadians(90));\r\n\r\n        // 笠のポイントの広がり角度を、末端のポイントに伝える\r\n        // 笠の列のカーブ（角度）を格納した配列を作成\r\n        for (let i = 0; i < CAP_JOINT_COUNT - 1; i++) {\r\n            this.capPointAngle[i] = this.capPointAngle[i + 1] + i;\r\n        }\r\n\r\n        this.capPointAngleBase += this.capPointAngleBaseSpd;\r\n        this.capPointAngle[9] = (Math.abs(Math.sin(this.capPointAngleBase)) * 30 + 20);\r\n\r\n        this.drawFillHead(renderer);\r\n        this.drawHeadFrame(renderer);\r\n\r\n        renderer.popMatrix();\r\n    }\r\n\r\n    /// <summary>\r\n    /// 移動量（Vector）をセットします。\r\n    /// </summary>\r\n    /// <param name=\"vector\"></param>\r\n    /// <param name=\"angle\"></param>\r\n    public translate(vector: Vector2D) {\r\n        this.location.x += vector.x;\r\n        this.location.y += vector.y;\r\n\r\n        this.vector = vector;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 移動量（Vector）をセットします。\r\n    /// </summary>\r\n    /// <param name=\"vector\"></param>\r\n    /// <param name=\"angle\"></param>\r\n    public rotate(angle: number) {\r\n        this.angle = angle;\r\n    }\r\n\r\n    /// <summary>\r\n    /// 笠のフレームを描画\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画するキャンバス</param>\r\n    private drawHeadFrame(renderer: IRenderer) {\r\n        renderer.beginPath();\r\n        for (let r = 90; r <= 270; r += 30) {\r\n            let x = 0; let y = 0;\r\n            let tx = 0; let ty = 0;\r\n            let p = 1;\r\n            for (let j = 0; j < CAP_JOINT_COUNT; j++) {\r\n                p -= this.headWitherPower;\r\n                const deg = this.capPointAngle[j];\r\n                x += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r)) * p);\r\n                y += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n\r\n                tx += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r + HEAD_DETAIL)) * p);\r\n                ty += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n\r\n                renderer.lineTo(x, y);\r\n                renderer.lineTo(tx, ty);\r\n            }\r\n        }\r\n        renderer.closePathFill(this.paintColor);\r\n    }\r\n\r\n    /// <summary>\r\n    /// 笠を描画\r\n    /// </summary>\r\n    /// <param name=\"canvas\">描画するキャンバス</param>\r\n    private drawFillHead(renderer: IRenderer) {\r\n        let p = 1;\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        renderer.beginPath();\r\n        renderer.moveTo(0, 0);\r\n\r\n        let r = 90;\r\n\r\n        for (let i = 0; i < CAP_JOINT_COUNT; i++) {\r\n            p -= this.headWitherPower;\r\n            const deg = this.capPointAngle[i];\r\n            x += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r)) * p);\r\n            y += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n            renderer.lineTo(x, y);\r\n        }\r\n\r\n        p = 1;\r\n        x = 0;\r\n        y = 0;\r\n        r = 270;\r\n        const stack: Vector2D[] = [];\r\n        for (let i = 0; i < CAP_JOINT_COUNT; i++) {\r\n            p -= this.headWitherPower;\r\n            const deg = this.capPointAngle[i];\r\n            x += (Math.sin(Numerics.toRadians(deg)) * this.headSize * Math.sin(Numerics.toRadians(r)) * p);\r\n            y += (Math.cos(Numerics.toRadians(deg)) * this.headSize);\r\n            stack.unshift(new Vector2D(x, y));\r\n        }\r\n        for (const stackPoint of stack) {\r\n            renderer.lineTo(stackPoint.x, stackPoint.y);\r\n        }\r\n        renderer.closePathFill(this.headFillPaintColor);\r\n    }\r\n}\r\n","import * as React from \"react\"\nimport { Size, Typography } from \"@material-ui/core\"\nimport { Coloney } from \"../components/Colony\"\nimport { Scene } from \"colony/src/lib/core/Scene\"\nimport { Renderer } from \"colony/src/lib/Renderer\"\nimport { Random } from \"colony/src/lib/core/Random\"\nimport { BoidController } from \"colony/src/lib/BoidController\"\nimport { TargetTrackingController } from \"colony/src/lib/TargetTrackingController\"\nimport { Fish } from \"colony/src/lib/Fish\"\nimport { Vector2D } from \"colony/src/lib/core/Vector2D\"\nimport { Jellyfish } from \"colony/src/lib/JellyFish\"\nimport { FoodProvider } from \"colony/src/lib/FoodProvider\"\nimport \"normalize.css\";\nimport { Color } from \"../../../src/lib/core/Color\"\n\nlet scene: Scene | null = null;\n\nconst init = (context: CanvasRenderingContext2D, size: { width: number, height: number }) => {\n    scene = new Scene(size.width, size.height, new Renderer(context))\n    scene.begin();\n    console.log(size)\n    scene.append(new FoodProvider());\n\n    scene.append(\n        new TargetTrackingController(\n            new Jellyfish(\n                new Vector2D(\n                    240,\n                    280\n                )\n            ),\n            6));\n    scene.append(\n        new TargetTrackingController(\n            new Jellyfish(\n                new Vector2D(\n                    120,\n                    360\n                )\n            ),\n            6));\n\n    const s = new TargetTrackingController(\n        new Jellyfish(\n            new Vector2D(\n                220,\n                500\n            )\n        ),\n        6);\n    scene.append(s\n    );\n\n    for (const code of [\n        \"#3f51b5\",\n        \"#2196f3\",\n        \"#00bcd4\",\n        \"#009688\",\n        \"#4caf50\",\n        \"#cddc39\",\n        \"#ffeb3b\",\n        \"#ffc107\",\n        \"#ff9800\",\n        \"#ff5722\",\n        \"#f44336\",\n        \"#e91e63\",\n        \"#9c27b0\"\n    ]) {\n        const c = Color.fromColorCode(code);\n\n        const boid = new BoidController(\n            new Fish(\n                new Vector2D(\n                    0,\n                    0\n                ),\n                new Color(0, 0, 0, 255)\n            )\n        );\n\n        scene.append(boid);\n\n        for (let j = 0; j < 5; j++) {\n            const coloney = new Fish(\n                new Vector2D(\n                    0,\n                    0\n                ),\n                c\n            );\n\n            const b = new TargetTrackingController(\n                coloney,\n            );\n            boid.addBoid(\n                b\n            );\n        }\n    }\n\n    window.addEventListener(\"pointerdown\", (e: MouseEvent) => {\n        scene.press({\n            key: \"mouse\",\n            position: {\n                x: e.clientX,\n                y: e.clientY\n            }\n        });\n    });\n}\n\nexport default () => {\n    const [size, setSize] = React.useState({ width: 0, height: 0 });\n\n    React.useEffect(() => {\n        setSize({ width: window.innerWidth, height: window.innerHeight });\n    }, [])\n\n    return (\n        <div style={{ height: \"100vh\", width: \"100vw\" }}>\n            <Coloney width={size.width + \"px\"} height={size.height + \"px\"}\n                resized={s => {\n                    if (scene) {\n                        scene.width = s.width;\n                        scene.height = s.height;\n                    }\n                }}\n                initialized={init}\n            />\n        </div>\n    );\n};\n"],"sourceRoot":""}